var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.317,1,2.585]],["body/controllers/AppController.html",[0,2.18,1,4.279,2,1.774,3,0.287,4,0.257,5,0.257,6,4.294,7,0.381,8,1.974,9,5.957,10,1.322,11,0.019,12,0.795,13,5,14,1.607,15,1.27,16,0.429,17,0.982,18,3.956,19,4.294,20,0.287,21,0.089,22,5,23,2.975,24,1.388,25,5,26,0.015,27,0.015]],["title/modules/AppModule.html",[28,1.317,29,2.585]],["body/modules/AppModule.html",[1,3.745,2,1.642,3,0.187,4,0.167,5,0.167,11,0.019,16,0.496,17,0.64,18,3.819,19,2.8,20,0.187,21,0.058,26,0.011,27,0.011,28,1.908,29,5.135,30,1.507,31,1.507,32,1.698,33,1.698,34,1.507,35,2.801,36,1.698,37,2.8,38,2.8,39,2.8,40,4.116,41,4.116,42,3.565,43,4.116,44,3.343,45,3.146,46,2.409,47,1.698,48,1.698,49,3.26,50,2.569,51,3.26,52,3.26,53,3.26,54,3.26,55,3.26,56,1.939,57,1.281,58,3.26,59,4.119,60,2.27,61,2.497,62,2.497,63,2.497,64,2.497,65,2.497,66,3.26,67,3.26,68,3.26,69,3.26,70,3.26,71,3.25,72,3.26,73,3.26,74,3.26,75,1.35,76,2.8,77,2.497,78,0.361,79,3.26,80,3.26,81,3.26,82,3.26,83,3.26,84,2.09,85,3.26,86,3.26,87,1.507,88,3.26,89,3.26,90,3.26,91,1.939,92,3.26,93,3.26,94,3.26,95,3.26,96,3.26]],["title/injectables/AppService.html",[18,2.208,97,0.847]],["body/injectables/AppService.html",[3,0.298,4,0.267,5,0.267,7,0.396,8,2.022,9,6.039,11,0.019,12,0.827,14,1.672,15,1.301,16,0.363,17,1.022,18,3.744,20,0.298,21,0.093,24,1.444,26,0.016,27,0.016,97,1.437,98,2.155,99,4.468,100,5.202,101,5.202,102,5.202]],["title/controllers/AuthController.html",[0,1.317,103,2.585]],["body/controllers/AuthController.html",[0,1.192,2,1.192,3,0.193,4,0.173,5,0.173,7,0.256,8,1.519,10,1.25,11,0.019,12,0.751,14,1.519,16,0.482,17,0.66,20,0.193,21,0.06,24,1.312,26,0.012,27,0.012,71,2.625,75,1.392,78,0.524,103,3.292,104,2.886,105,1.999,106,2.625,107,2.333,108,4.059,109,4.059,110,3.36,111,3.719,112,1.919,113,4.788,114,3.36,115,3.36,116,1.677,117,1.312,118,1.446,119,4.726,120,1.647,121,2.886,122,2.907,123,4.726,124,3.36,125,2.528,126,3.36,127,2.154,128,2.154,129,2.574,130,1.647,131,3.36,132,2.341,133,1.999,134,1.866,135,2.265,136,2.154,137,3.036,138,2.574,139,2.886,140,2.574,141,2.341,142,3.36,143,2.574,144,3.36,145,1.192,146,3.36,147,1.677,148,2.154,149,3.36,150,4.726,151,4.726,152,1.764,153,2.743,154,1.764,155,3.36,156,4.059,157,2.186,158,4.059,159,2.625,160,1.392,161,3.36,162,3.36,163,2.886]],["title/classes/AuthLoginDto.html",[21,0.066,111,2.208]],["body/classes/AuthLoginDto.html",[3,0.277,4,0.248,5,0.248,7,0.368,10,1.59,11,0.019,12,0.956,15,1.416,16,0.42,20,0.277,21,0.107,26,0.015,27,0.015,78,0.666,87,3.028,111,3.577,164,2.112,165,5.015,166,4.148,167,1.515,168,2.573,169,3.699,170,4.829,171,4.148,172,4.829,173,4.188,174,3.41,175,2.001,176,5.623,177,3.364]],["title/modules/AuthModule.html",[28,1.317,40,2.379]],["body/modules/AuthModule.html",[2,1.81,3,0.215,4,0.193,5,0.193,11,0.019,16,0.5,17,0.737,20,0.215,21,0.067,26,0.013,27,0.013,28,2.057,30,1.735,31,1.735,32,1.955,33,1.955,34,1.735,35,3.019,36,1.955,40,4.669,45,3.288,46,2.657,47,1.955,48,1.955,50,2.833,59,4.439,60,2.614,75,1.555,76,3.223,77,2.874,103,4.037,137,3.726,138,2.874,178,3.223,179,3.753,180,3.223,181,4.301,182,4.301,183,3.753,184,3.753,185,2.874,186,3.753,187,2.233,188,2.614,189,3.223,190,2.614,191,3.753,192,3.753,193,3.753,194,3.753,195,3.753,196,2.874,197,3.753,198,3.753,199,3.223,200,3.753,201,3.753,202,3.753]],["title/classes/AuthRegisterDto.html",[21,0.066,203,2.842]],["body/classes/AuthRegisterDto.html",[3,0.252,4,0.226,5,0.226,7,0.335,10,1.751,11,0.019,12,1.052,15,1.45,16,0.395,20,0.252,21,0.101,26,0.014,27,0.014,78,0.733,87,2.619,106,2.44,111,4.076,140,3.366,164,1.922,165,4.8,167,1.427,168,2.226,169,3.366,171,3.774,173,3.945,174,3.447,175,1.82,203,4.338,204,3.774,205,2.95,206,6.267,207,4.017,208,4.394,209,4.394,210,4.394,211,3.945,212,4.394,213,4.394]],["title/injectables/AuthService.html",[97,0.847,137,2.061]],["body/injectables/AuthService.html",[3,0.159,4,0.142,5,0.142,7,0.211,8,1.322,11,0.019,12,0.862,14,1.576,15,1.334,16,0.45,17,0.545,20,0.159,21,0.049,24,1.685,26,0.01,27,0.01,71,1.541,75,1.149,78,0.601,87,2.807,97,0.94,98,1.149,107,2.409,108,3.534,109,3.534,111,2.448,112,1.992,116,1.925,117,1.506,118,1.66,121,3.534,122,2.659,125,1.283,132,1.932,133,1.65,134,1.541,135,2.248,136,1.778,137,2.285,139,2.382,140,2.125,145,1.46,147,1.46,148,1.778,152,2.461,154,2.163,156,2.382,157,1.283,158,2.382,159,1.541,160,2.515,168,1.928,185,2.125,214,2.382,215,4.115,216,2.382,217,6.284,218,2.774,219,3.151,220,4.115,221,2.774,222,5.426,223,2.774,224,4.905,225,2.774,226,2.774,227,1.65,228,1.09,229,1.541,230,2.774,231,2.774,232,2.774,233,4.115,234,1.297,235,5.795,236,3.534,237,2.774,238,3.151,239,2.774,240,4.115,241,3.151,242,2.017,243,2.774]],["title/classes/CreateReservationDto.html",[21,0.066,244,2.208]],["body/classes/CreateReservationDto.html",[3,0.239,4,0.214,5,0.214,7,0.318,10,1.448,11,0.019,12,0.972,16,0.453,20,0.239,21,0.098,26,0.014,27,0.014,78,0.677,164,1.825,167,1.38,174,2.174,175,1.729,228,1.64,229,2.318,244,3.258,245,5.574,246,3.197,247,5.251,248,4.161,249,4.682,250,1.802,251,3.38,252,4.174,253,3.919,254,3.585,255,4.174,256,4.174,257,3.815,258,3.197,259,5.477,260,3.815,261,1.341,262,2.676,263,3.197,264,3.197,265,4.174,266,1.825,267,4.174,268,3.197,269,4.174,270,4.174,271,4.174,272,4.174,273,4.174,274,4.174,275,4.174,276,4.174,277,4.174,278,4.174]],["title/classes/CreateRouteDto.html",[21,0.066,279,2.379]],["body/classes/CreateRouteDto.html",[3,0.223,4,0.2,5,0.2,7,0.296,10,1.793,11,0.019,12,1.077,16,0.365,20,0.223,21,0.093,26,0.013,27,0.013,78,0.751,153,1.797,164,1.7,167,1.316,174,2.024,175,1.61,250,1.882,251,3.428,257,4.11,260,4.824,261,2.115,262,2.492,266,2.285,279,3.349,280,5.949,281,2.977,282,3.783,283,5.068,284,3.783,285,5.068,286,3.51,287,5.068,288,3.887,289,3.887,290,3.887,291,3.887,292,3.887,293,3.887,294,2.977,295,3.338,296,4.487,297,3.338,298,3.639,299,4.001,300,3.338,301,2.977]],["title/classes/CreateStopDto.html",[21,0.066,302,2.208]],["body/classes/CreateStopDto.html",[3,0.25,4,0.224,5,0.224,7,0.332,10,1.65,11,0.019,12,0.992,15,1.164,16,0.393,20,0.25,21,0.1,26,0.014,27,0.014,78,0.691,117,1.732,164,1.904,167,1.418,174,3.249,175,1.804,234,1.151,242,3.348,250,1.896,251,3.435,260,4.346,294,3.334,302,3.349,303,5.665,304,3.334,305,4.779,306,4.779,307,3.739,308,4.353,309,3.739,310,4.353,311,4.353,312,2.214,313,3.739]],["title/classes/CreateUserDto.html",[21,0.066,122,1.819]],["body/classes/CreateUserDto.html",[3,0.208,4,0.186,5,0.186,7,0.276,10,1.799,11,0.019,12,1.081,15,1.432,16,0.397,20,0.208,21,0.089,26,0.012,27,0.012,78,0.754,87,2.633,122,2.443,132,4.826,164,1.586,167,1.256,168,2.238,169,2.779,173,3.472,174,3.347,175,1.503,176,5.704,177,2.527,207,3.651,251,2.966,257,3.472,258,2.779,266,2.18,314,2.779,315,3.966,316,3.966,317,3.388,318,3.966,319,3.628,320,3.628,321,3.628,322,3.628,323,3.628,324,3.472,325,3.628,326,3.628,327,3.628,328,3.628,329,3.628,330,4.281,331,3.628,332,3.651,333,3.628,334,3.628,335,4.281,336,3.116,337,3.116,338,2.779,339,3.116,340,2.527,341,2.527,342,4.891,343,3.628,344,3.628,345,3.628,346,3.628]],["title/classes/EditReservationDto.html",[21,0.066,347,2.379]],["body/classes/EditReservationDto.html",[3,0.27,4,0.241,5,0.241,7,0.358,10,1.563,11,0.019,12,1.028,16,0.413,20,0.27,21,0.105,26,0.015,27,0.015,78,0.716,164,2.056,167,1.489,175,1.947,205,3.079,211,4.505,244,4.247,246,3.6,247,5.078,248,3.79,249,4.528,250,1.641,251,3.079,253,3.013,254,4.037,347,3.79,348,4.037,349,4.701,350,4.701,351,4.701,352,3.6,353,3.6]],["title/classes/EditRouteDto.html",[21,0.066,354,2.379]],["body/classes/EditRouteDto.html",[3,0.211,4,0.189,5,0.189,7,0.281,10,1.806,11,0.019,12,1.086,16,0.401,20,0.211,21,0.09,26,0.012,27,0.012,78,0.757,153,1.704,164,1.611,167,1.269,174,1.919,175,1.526,228,2.256,229,2.046,250,1.852,251,3.83,257,3.509,260,2.566,261,2.077,262,2.362,266,2.203,281,2.822,282,3.68,283,4.931,284,3.68,285,4.931,286,3.415,287,4.931,294,2.822,295,3.164,296,4.327,297,3.164,298,3.509,299,3.859,300,3.164,301,2.822,354,3.23,355,5.973,356,3.999,357,3.684,358,3.684,359,3.684,360,3.684,361,3.684,362,3.684,363,3.684,364,3.684]],["title/classes/EditStopDto.html",[21,0.066,365,2.379]],["body/classes/EditStopDto.html",[3,0.259,4,0.232,5,0.232,7,0.344,10,1.68,11,0.019,12,1.009,15,1.192,16,0.402,20,0.259,21,0.103,26,0.014,27,0.014,78,0.704,117,1.763,164,1.977,167,1.453,175,1.873,205,3.004,211,4.424,234,1.195,242,2.826,250,1.763,251,3.308,302,4.204,304,3.462,305,4.417,306,4.417,307,3.883,309,3.883,352,3.462,365,3.697,366,3.883,367,4.52,368,4.52,369,4.52,370,3.462]],["title/classes/EditUserDto.html",[21,0.066,371,2.208]],["body/classes/EditUserDto.html",[3,0.203,4,0.182,5,0.182,7,0.27,10,1.787,11,0.019,12,1.074,15,1.423,16,0.423,20,0.203,21,0.087,26,0.012,27,0.012,78,0.748,87,2.599,122,3.469,133,2.104,164,1.547,167,1.234,168,2.208,173,2.463,174,1.842,175,1.465,177,2.463,205,2.551,207,3.602,211,4.705,242,2.401,251,3.587,258,2.709,266,2.142,314,2.709,315,3.914,316,3.914,317,3.343,318,3.914,324,3.412,332,3.602,335,3.038,336,3.038,337,3.038,338,2.709,339,3.038,340,2.463,341,2.463,342,5.915,352,2.709,371,2.914,372,3.038,373,6.756,374,3.537,375,3.537,376,3.537,377,3.537,378,3.537,379,3.537,380,3.537]],["title/injectables/JwtAuthGuard.html",[97,0.847,381,2.379]],["body/injectables/JwtAuthGuard.html",[3,0.387,4,0.238,5,0.238,7,0.354,8,1.884,11,0.019,12,0.737,14,1.491,16,0.409,17,0.911,20,0.266,21,0.083,24,1.288,26,0.015,27,0.015,97,1.339,98,1.922,106,3.256,112,1.934,116,1.646,117,1.288,118,1.419,187,2.76,205,3.053,381,3.759,382,4.084,383,3.553,384,5.863,385,5.863,386,5.863,387,4.639,388,6.428,389,3.984,390,3.984,391,2.76,392,2.029,393,4.639,394,4.639]],["title/interfaces/JwtPayload.html",[395,1.385,396,2.585]],["body/interfaces/JwtPayload.html",[3,0.292,4,0.261,5,0.261,7,0.388,11,0.018,15,1.385,20,0.292,26,0.015,27,0.015,78,0.742,167,1.564,168,2.743,234,1.846,238,5.345,250,2.021,395,1.9,396,4.326,397,2.827,398,4.372]],["title/injectables/JwtStrategy.html",[97,0.847,181,2.379]],["body/injectables/JwtStrategy.html",[3,0.224,4,0.201,5,0.201,7,0.298,8,1.685,11,0.019,12,0.833,14,1.256,16,0.484,17,0.768,20,0.224,21,0.07,24,1.085,26,0.013,27,0.013,59,4.843,60,2.722,77,4.532,78,0.581,97,1.197,98,1.619,107,2.209,116,1.861,117,1.456,118,1.604,120,1.915,135,2.62,136,2.506,145,1.861,147,1.861,152,1.459,154,1.459,168,2.061,181,3.361,187,2.325,188,2.722,189,3.357,196,2.994,199,3.357,205,2.731,216,3.357,219,4.016,234,1.034,236,4.503,238,2.994,396,4.404,399,3.357,400,4.503,401,4.503,402,3.908,403,5.243,404,3.908,405,3.357,406,3.908,407,3.357,408,2.994,409,3.908,410,3.357,411,3.908,412,3.908,413,3.908,414,3.357,415,3.908,416,3.357]],["title/injectables/LocalAuthGuard.html",[97,0.847,141,2.585]],["body/injectables/LocalAuthGuard.html",[3,0.307,4,0.275,5,0.275,11,0.018,16,0.447,17,1.053,20,0.307,21,0.096,26,0.016,27,0.016,97,1.463,98,2.22,106,2.977,141,4.463,187,3.189,205,3.337,383,4.105,390,4.603,417,4.603,418,6.407]],["title/injectables/LocalStrategy.html",[97,0.847,182,2.379]],["body/injectables/LocalStrategy.html",[3,0.234,4,0.209,5,0.209,7,0.311,8,1.733,11,0.019,12,0.857,14,1.31,15,1.42,16,0.449,17,0.801,20,0.234,21,0.073,23,2.426,24,1.132,26,0.013,27,0.013,78,0.597,87,3.093,97,1.232,98,1.689,107,2.256,112,1.497,116,1.914,117,1.497,118,1.65,120,1.998,137,3.817,138,3.123,145,1.914,147,1.447,152,1.522,154,1.522,168,2.12,182,3.458,187,2.426,205,2.809,389,3.502,391,2.426,392,1.783,400,4.632,401,4.632,405,3.502,407,3.502,408,3.123,410,3.502,419,3.502,420,4.077,421,4.077,422,5.393,423,4.077,424,3.502,425,4.077,426,4.077,427,4.077,428,4.077,429,4.077,430,4.077,431,4.077]],["title/interfaces/LoginInterface.html",[395,1.385,432,2.842]],["body/interfaces/LoginInterface.html",[3,0.297,4,0.266,5,0.266,7,0.395,11,0.018,15,1.511,20,0.297,26,0.016,27,0.016,78,0.696,87,3.247,118,2.149,167,1.582,168,2.76,395,1.935,397,2.879,432,4.81,433,4.452]],["title/entities/Reservation.html",[434,1.819,435,2.061]],["body/entities/Reservation.html",[3,0.189,4,0.169,5,0.169,7,0.251,10,1.703,11,0.019,12,1.023,15,0.962,16,0.462,20,0.189,21,0.059,26,0.012,27,0.012,78,0.781,91,1.957,112,1.838,117,1.293,134,1.827,167,1.173,228,2.124,229,1.827,234,1.429,248,3.465,253,3.976,263,2.52,264,2.52,266,2.57,312,2.4,434,1.612,435,2.586,436,2.826,437,3.764,438,3.764,439,2.826,440,3.999,441,4.501,442,3.29,443,3.29,444,3.29,445,4.14,446,3.567,447,4.656,448,4.093,449,3.999,450,3.29,451,2.826,452,5.047,453,3.567,454,2.826,455,3.29,456,2.826,457,3.999,458,3.29,459,4.656,460,3.29,461,1.957,462,3.243,463,3.999,464,2.52,465,4.642,466,3.764,467,2.292,468,2.292,469,2.292,470,3.999,471,1.363,472,1.714,473,2.52,474,2.826,475,3.29,476,3.29,477,3.29,478,3.243]],["title/interfaces/ReservationI.html",[395,1.385,472,1.933]],["body/interfaces/ReservationI.html",[3,0.233,4,0.208,5,0.208,7,0.309,11,0.019,15,1.38,16,0.421,20,0.308,26,0.013,27,0.013,78,0.775,112,1.781,118,2.255,157,2.485,167,1.353,228,2.522,229,2.252,234,1.697,248,4.114,253,4.114,263,3.105,264,3.105,266,3,312,2.369,313,3.482,395,1.513,397,2.252,437,4.469,438,4.469,445,4.915,472,3.139,479,3.105,480,2.824,481,2.599]],["title/controllers/ReservationsController.html",[0,1.317,482,2.585]],["body/controllers/ReservationsController.html",[0,1.016,2,1.016,3,0.164,4,0.147,5,0.147,7,0.218,8,1.354,10,1.624,11,0.019,12,0.976,14,1.973,15,1.374,16,0.455,17,0.563,20,0.164,21,0.051,24,1.705,26,0.01,27,0.01,75,1.186,78,0.651,105,1.704,106,1.59,116,2.084,117,1.63,118,1.797,125,2.84,127,2.701,128,3.204,129,2.193,130,1.403,143,2.193,145,1.016,147,1.016,160,2.283,228,1.125,229,1.59,234,1.723,244,3.278,250,1.387,347,3.533,353,3.227,381,1.836,382,1.995,392,2.185,472,1.491,473,2.193,480,1.995,481,1.836,482,2.934,483,2.46,484,3.618,485,4.997,486,5.51,487,3.828,488,4.292,489,4.292,490,2.46,491,2.864,492,2.864,493,2.934,494,2.864,495,2.46,496,2.864,497,2.193,498,2.934,499,2.864,500,2.46,501,4.213,502,2.864,503,2.46,504,2.934,505,2.864,506,1.59,507,1.836,508,1.836,509,2.46,510,2.864,511,1.995,512,2.46,513,1.59,514,1.403,515,1.403,516,2.506,517,2.46,518,2.864,519,2.864,520,2.864,521,2.864,522,2.864,523,2.46,524,2.864,525,3.838,526,2.864,527,4.997,528,4.292,529,4.292,530,4.292,531,2.864,532,2.864,533,2.864]],["title/modules/ReservationsModule.html",[28,1.317,41,2.379]],["body/modules/ReservationsModule.html",[2,1.726,3,0.201,4,0.18,5,0.18,11,0.019,16,0.502,17,0.688,20,0.201,21,0.062,26,0.012,27,0.012,28,1.984,30,1.619,31,1.619,32,1.824,33,1.824,34,1.619,35,2.911,36,1.824,41,4.729,42,3.648,44,3.421,45,3.219,46,2.534,47,1.824,48,1.824,50,2.702,56,2.083,57,1.376,112,0.972,153,2.25,190,2.439,261,1.563,268,3.726,298,2.439,312,1.726,435,1.945,461,2.083,482,3.893,516,3.908,517,3.008,534,3.008,535,3.502,536,3.008,537,3.038,538,3.038,539,3.502,540,3.008,541,3.502,542,3.502,543,3.502,544,3.502,545,3.502,546,3.008,547,3.008,548,3.502,549,3.502,550,3.008,551,3.502,552,3.008,553,3.008,554,2.682,555,2.439,556,2.682,557,2.083,558,3.502]],["title/injectables/ReservationsService.html",[97,0.847,516,2.208]],["body/injectables/ReservationsService.html",[3,0.111,4,0.099,5,0.099,7,0.147,8,0.999,11,0.019,12,0.911,14,1.77,15,1.222,16,0.454,17,0.38,20,0.111,21,0.034,23,1.85,24,1.59,26,0.008,27,0.008,57,0.759,75,0.801,78,0.58,97,0.71,98,0.801,107,2.571,112,1.642,116,1.859,117,1.454,118,1.603,120,1.524,125,2.423,130,0.947,134,1.073,135,1.853,136,1.239,145,1.104,147,1.385,148,1.239,152,2.461,154,2.512,157,2.423,159,2.168,160,2.45,219,2.99,228,0.759,229,1.073,234,1.762,244,2.661,248,1.239,249,2.99,250,0.863,268,2.382,312,1.859,347,2.868,353,2.382,391,1.85,392,1.707,416,1.66,435,3.51,445,1.48,471,0.801,472,1.006,473,1.48,474,1.66,480,1.346,481,1.239,484,2.671,488,2.671,489,2.671,490,2.671,500,1.66,503,2.671,513,1.073,514,0.947,515,0.947,516,1.85,537,2.267,550,1.66,552,1.66,554,1.48,559,1.66,560,4.473,561,4.473,562,3.11,563,3.11,564,1.932,565,2.484,566,3.903,567,1.932,568,3.11,569,1.932,570,1.932,571,1.932,572,3.11,573,1.932,574,1.932,575,1.932,576,3.11,577,1.932,578,1.48,579,1.15,580,1.66,581,1.932,582,1.932,583,1.932,584,3.11,585,1.932,586,1.932,587,1.932,588,1.932,589,1.932,590,1.932,591,4.473,592,3.11,593,1.932,594,1.932,595,1.932,596,3.11,597,3.11,598,1.932,599,1.932,600,1.932,601,2.382,602,2.382,603,2.382,604,1.932,605,1.932,606,3.11,607,1.932,608,1.932,609,2.719,610,1.66,611,1.932,612,1.66,613,3.903,614,1.932,615,1.48,616,3.116,617,2.382,618,3.426,619,1.932,620,1.932,621,2.166,622,1.932,623,1.932,624,1.932,625,1.932,626,1.932,627,3.11,628,1.932,629,1.932]],["title/entities/Route.html",[312,1.317,434,1.819]],["body/entities/Route.html",[3,0.189,4,0.169,5,0.169,7,0.251,10,1.704,11,0.019,12,1.024,16,0.433,20,0.189,21,0.059,26,0.012,27,0.012,78,0.714,91,1.962,112,1.723,134,1.832,167,1.175,234,1.431,242,1.616,250,1.295,261,2.308,266,2.04,282,3.469,284,3.469,286,3.219,312,1.655,356,4.323,434,1.616,435,3.447,446,4.145,448,4.713,449,2.832,462,3.769,464,4.145,465,4.648,466,4.097,467,3.249,468,2.297,469,3.769,471,1.366,472,2.818,478,3.769,481,3.469,557,1.962,630,2.832,631,3.298,632,4.664,633,4.664,634,3.298,635,3.298,636,4.664,637,4.664,638,3.298,639,3.298,640,2.832,641,4.664,642,3.298,643,4.664,644,3.298,645,2.832,646,2.832,647,2.832,648,3.298]],["title/controllers/RoutesController.html",[0,1.317,649,2.585]],["body/controllers/RoutesController.html",[0,1.106,2,1.106,3,0.179,4,0.16,5,0.16,7,0.237,8,1.439,10,1.606,11,0.019,12,0.965,14,1.952,16,0.455,17,0.612,20,0.179,21,0.056,24,1.686,26,0.011,27,0.011,75,1.291,78,0.635,105,1.854,107,1.958,116,2.035,117,1.592,118,1.754,120,1.527,125,2.924,127,2.872,128,3.362,130,1.527,145,1.106,147,1.106,152,1.163,154,1.672,157,1.441,159,1.731,160,2.375,234,1.606,250,1.885,261,1.001,262,1.998,279,3.676,312,1.861,354,3.676,493,3.12,498,3.12,504,3.12,506,1.731,508,1.998,511,2.17,513,2.913,514,1.527,515,1.527,525,3.12,537,2.425,547,2.676,649,3.12,650,2.676,651,3.847,652,4.479,653,5.734,654,5.244,655,3.653,656,2.676,657,3.116,658,4.479,659,3.116,660,3.116,661,3.116,662,3.116,663,1.998,664,3.116,665,3.847,666,2.387,667,2.676,668,3.116,669,2.676,670,3.116,671,3.116,672,3.116,673,4.479,674,3.116,675,2.676,676,2.676,677,3.116]],["title/modules/RoutesModule.html",[28,1.317,42,2.061]],["body/modules/RoutesModule.html",[2,1.878,3,0.227,4,0.204,5,0.204,11,0.019,16,0.505,17,0.779,20,0.227,21,0.071,26,0.013,27,0.013,28,2.114,30,1.833,31,1.833,32,2.064,33,2.064,34,1.833,35,3.103,36,2.064,42,4.08,44,3.55,45,3.341,46,2.756,47,2.064,48,2.064,50,2.939,56,2.358,57,1.558,190,2.76,261,1.273,312,1.406,471,1.642,537,3.152,538,3.152,555,2.76,556,3.035,557,2.358,649,4.15,666,3.035,667,3.404,678,3.963,679,3.963,680,3.963,681,3.963,682,3.963,683,3.963,684,3.404,685,3.035]],["title/injectables/RoutesService.html",[97,0.847,537,1.716]],["body/injectables/RoutesService.html",[3,0.139,4,0.125,5,0.125,7,0.185,8,1.197,11,0.019,12,0.918,14,1.758,16,0.467,17,0.478,20,0.139,21,0.043,24,1.519,26,0.009,27,0.009,57,0.955,75,1.007,78,0.606,97,0.851,98,1.007,107,2.499,112,1.034,116,1.942,117,1.519,118,1.674,120,2.219,125,1.124,130,1.191,134,1.35,135,2.49,136,1.558,145,1.322,147,1.607,148,1.558,152,2.314,154,2.421,157,1.124,159,1.35,160,1.543,234,1.447,242,2.219,250,1.765,261,1.631,262,1.558,279,3.254,284,3.254,286,3.019,312,2.049,354,3.254,356,3.812,392,1.063,471,1.007,506,2.515,513,2.515,514,1.191,515,1.191,537,1.722,538,2.779,555,1.693,557,1.446,565,2.819,579,1.446,601,1.862,602,1.862,603,1.862,651,3.199,655,2.594,656,3.199,663,2.388,665,3.199,666,1.862,686,2.088,687,3.199,688,5.075,689,3.725,690,2.088,691,2.431,692,3.199,693,2.431,694,2.853,695,2.431,696,2.431,697,3.725,698,2.431,699,2.431,700,1.693,701,2.431,702,2.088,703,2.088,704,2.431,705,2.431,706,2.431,707,4.528,708,2.431,709,2.431,710,2.431,711,2.431,712,2.431,713,2.431,714,2.431,715,2.431,716,2.431,717,2.431,718,2.431,719,2.431,720,2.431,721,2.088,722,2.431,723,2.431,724,2.431,725,2.431,726,2.431,727,2.431,728,2.431,729,3.725,730,2.431,731,2.431]],["title/controllers/SearchController.html",[0,1.317,732,2.585]],["body/controllers/SearchController.html",[0,1.62,2,1.62,3,0.262,4,0.234,5,0.234,7,0.348,8,1.865,10,1.207,11,0.019,12,0.725,14,1.467,16,0.405,17,0.897,20,0.262,21,0.081,24,1.267,26,0.014,27,0.014,75,1.891,105,2.715,107,2.381,116,1.62,117,1.267,118,1.397,120,2.237,145,1.62,147,1.62,152,2.381,154,1.704,282,3.72,508,2.926,732,4.042,733,3.92,734,4.564,735,4.984,736,4.564,737,4.564,738,5.803,739,4.564,740,3.795,741,3.92,742,4.564,743,4.564,744,4.564,745,4.564,746,4.564,747,4.564,748,4.564]],["title/modules/SearchModule.html",[28,1.317,43,2.379]],["body/modules/SearchModule.html",[2,1.788,3,0.211,4,0.189,5,0.189,11,0.019,16,0.507,17,0.724,20,0.211,21,0.066,26,0.012,27,0.012,28,2.037,30,1.704,31,1.704,32,1.919,33,1.919,34,1.704,35,2.99,36,1.919,42,3.706,43,4.76,44,3.475,45,3.27,46,2.624,47,1.919,48,1.919,50,2.798,56,2.192,57,1.448,112,1.023,134,2.046,190,2.566,261,1.184,312,1.307,461,2.192,537,3.085,538,3.085,553,3.164,554,2.822,555,2.566,556,2.822,557,2.192,684,3.164,685,2.822,732,3.999,740,3.969,741,3.164,749,3.164,750,3.164,751,3.684,752,3.684,753,3.684,754,3.164]],["title/injectables/SearchService.html",[97,0.847,740,2.208]],["body/injectables/SearchService.html",[3,0.13,4,0.116,5,0.116,7,0.172,8,1.131,11,0.019,12,0.56,14,0.726,15,1.21,16,0.391,17,0.444,20,0.13,21,0.04,24,0.627,26,0.009,27,0.009,57,0.888,75,0.936,78,0.39,97,0.804,98,0.936,107,1.614,116,1.249,117,1.355,118,1.077,145,1.249,147,1.535,152,2.26,153,2.707,154,2.185,157,1.045,160,1.458,234,0.931,261,1.998,266,1.891,282,3.752,284,2.773,286,2.573,298,2.452,299,2.697,301,2.697,312,2.207,441,4.637,461,1.344,471,0.936,537,1.628,546,1.941,557,1.344,565,3.251,579,1.344,601,2.697,669,1.941,690,1.941,692,3.024,702,1.941,735,3.024,740,2.094,755,1.941,756,3.715,757,2.26,758,3.521,759,2.26,760,2.26,761,1.941,762,2.26,763,1.941,764,2.26,765,3.521,766,5.199,767,5.606,768,6.58,769,6.477,770,6.038,771,3.521,772,4.325,773,4.883,774,5.027,775,5.853,776,5.853,777,4.883,778,4.883,779,4.883,780,4.325,781,2.26,782,2.26,783,1.941,784,2.26,785,4.325,786,3.024,787,4.325,788,2.26,789,2.26,790,2.26,791,2.26,792,5.606,793,5.606,794,5.606,795,2.26,796,3.024,797,3.521,798,3.521,799,3.521,800,3.521,801,2.26,802,2.26,803,2.26,804,2.26,805,2.26,806,2.26,807,2.26]],["title/entities/Stop.html",[261,1.192,434,1.819]],["body/entities/Stop.html",[3,0.209,4,0.187,5,0.187,7,0.278,10,1.759,11,0.019,12,1.057,15,1.034,16,0.349,20,0.209,21,0.065,26,0.012,27,0.012,71,3.694,78,0.737,91,2.169,117,1.585,167,1.26,234,1.51,250,1.846,261,1.607,305,4.374,306,4.374,312,2.59,434,1.787,448,4.28,461,2.169,462,4.28,466,2.54,467,3.977,468,2.54,469,3.977,471,1.511,478,4.28,602,3.831,603,3.831,640,4.296,647,3.132,808,3.132,809,5.71,810,5.71,811,3.646,812,3.646,813,3.646,814,5.002,815,3.646,816,3.646,817,3.132,818,3.646,819,3.646,820,3.132,821,4.296]],["title/interfaces/StopResponse.html",[395,1.385,822,2.585]],["body/interfaces/StopResponse.html",[3,0.295,4,0.264,5,0.264,7,0.392,11,0.018,15,1.392,16,0.359,20,0.295,26,0.015,27,0.015,78,0.693,157,3.239,167,1.575,261,2.395,395,1.921,397,2.858,822,4.354,823,4.419,824,4.419,825,5.145]],["title/controllers/StopsController.html",[0,1.317,826,2.585]],["body/controllers/StopsController.html",[0,1.192,2,1.192,3,0.193,4,0.173,5,0.173,7,0.256,8,1.519,10,1.653,11,0.019,12,0.994,14,2.009,16,0.414,17,0.66,20,0.193,21,0.06,24,1.735,26,0.012,27,0.012,75,1.392,78,0.657,105,1.999,116,2.105,117,1.647,118,1.815,125,2.186,127,3.03,128,3.505,145,1.192,147,1.192,160,2.686,234,1.653,250,1.919,261,1.906,302,3.529,365,3.803,370,3.62,493,3.292,498,3.292,504,3.292,506,1.866,508,2.154,511,2.341,514,1.647,515,1.647,525,2.341,538,2.528,703,2.886,783,2.886,826,3.292,827,2.886,828,4.059,829,4.059,830,5.095,831,4.726,832,5.467,833,2.886,834,3.36,835,4.059,836,3.36,837,3.36,838,3.36,839,3.36,840,3.36,841,3.36,842,2.886,843,3.36,844,3.36,845,3.36,846,3.36,847,3.36,848,3.36,849,3.36,850,3.36]],["title/modules/StopsModule.html",[28,1.317,44,1.933]],["body/modules/StopsModule.html",[2,2.08,3,0.266,4,0.238,5,0.238,11,0.019,16,0.486,17,0.911,20,0.266,21,0.083,26,0.015,27,0.015,28,2.281,30,2.145,31,2.145,32,2.416,33,2.416,34,2.145,35,3.348,36,2.416,44,3.705,46,3.053,47,2.416,48,2.416,50,2.576,56,2.76,57,1.823,261,1.491,538,3.29,685,3.553,826,4.477,842,3.984,851,4.639,852,4.639,853,4.639,854,4.639,855,3.984]],["title/injectables/StopsService.html",[97,0.847,538,1.716]],["body/injectables/StopsService.html",[3,0.146,4,0.131,5,0.131,7,0.194,8,1.239,11,0.019,12,0.934,14,1.794,15,0.526,16,0.426,17,0.5,20,0.146,21,0.045,23,1.514,24,1.55,26,0.01,27,0.01,57,1,78,0.619,97,0.881,98,1.054,107,2.603,116,1.982,117,1.695,118,1.709,120,1.89,125,1.177,145,1.368,147,0.903,152,2.085,153,2.154,154,2.279,157,2.824,159,2.886,160,2.435,234,1.477,242,1.247,250,1.788,261,1.889,302,3.092,365,3.331,370,2.954,391,2.294,392,2.037,471,1.054,507,1.631,514,1.247,515,1.247,538,1.783,565,2.886,579,1.514,609,1.772,610,2.185,612,2.185,616,2.686,621,2.686,700,1.772,756,3.312,763,2.185,770,2.185,786,4,796,2.185,822,1.772,828,3.312,829,3.312,830,4.463,833,3.312,835,3.312,855,2.185,856,2.185,857,3.857,858,3.857,859,2.544,860,2.544,861,2.544,862,3.857,863,2.544,864,3.857,865,2.544,866,2.544,867,2.544,868,2.544,869,2.544,870,2.544,871,2.544,872,2.544,873,2.544,874,4.657,875,3.857,876,3.857,877,3.857,878,3.857,879,3.857,880,2.954,881,5.197,882,2.544,883,2.544,884,2.544,885,2.544,886,2.544,887,2.544,888,2.185,889,2.544,890,2.544,891,2.544,892,2.544,893,2.544]],["title/entities/User.html",[112,1.03,434,1.819]],["body/entities/User.html",[3,0.139,4,0.125,5,0.125,7,0.185,10,1.77,11,0.019,12,1.064,15,1.281,16,0.403,20,0.139,21,0.043,24,0.674,26,0.009,27,0.009,71,3.204,78,0.803,84,1.556,87,2.092,91,1.444,107,1.388,112,1.256,117,1.602,154,0.906,167,0.937,168,1.778,207,2.9,227,1.444,234,1.196,250,1.033,266,2.71,312,2.254,315,3.15,316,3.15,317,2.691,318,3.15,324,2.591,330,3.195,332,3.505,338,3.884,340,1.69,341,1.69,414,4.355,434,1.823,435,3.037,437,3.15,438,3.15,439,2.084,440,3.195,441,3.884,446,1.859,448,3.532,451,2.084,452,4.355,453,3.464,454,2.084,456,2.084,457,3.195,461,1.444,462,4.316,463,3.195,464,1.859,466,2.591,467,1.69,468,1.69,469,3.15,470,3.195,471,1.005,472,2.356,478,3.532,481,2.9,645,2.084,646,2.084,721,3.195,766,2.084,817,2.084,820,2.084,821,4.355,894,2.084,895,4.523,896,3.72,897,2.426,898,2.426,899,2.426,900,3.72,901,5.071,902,2.426,903,2.426,904,2.426,905,2.426,906,3.72,907,3.72,908,2.426,909,2.426,910,2.426,911,3.72,912,3.72,913,2.426,914,2.426,915,2.426,916,2.426,917,1.69,918,4.523,919,3.72,920,2.426,921,2.426,922,3.72,923,2.426,924,2.426,925,2.426,926,2.426]],["title/interfaces/UserFindOne.html",[395,1.385,927,2.585]],["body/interfaces/UserFindOne.html",[3,0.134,4,0.12,5,0.12,7,0.178,11,0.019,15,0.913,16,0.438,17,0.459,20,0.207,21,0.042,23,1.389,24,1.781,26,0.009,27,0.009,57,0.917,71,2.005,78,0.4,84,2.315,97,0.825,107,2.284,112,1.886,113,2.765,118,1.52,122,1.769,130,1.144,133,2.148,135,0.967,145,0.828,147,0.828,152,2.475,153,2.83,154,2.561,160,1.829,167,0.909,168,2.328,227,1.389,228,0.917,234,1.797,241,3.805,242,1.769,250,1.699,317,2.148,371,2.148,391,3.196,392,2.349,395,0.871,397,1.296,471,0.967,487,1.788,497,1.788,506,2.005,507,1.496,513,2.005,514,1.144,515,1.144,565,2.005,578,1.788,579,1.389,609,2.515,615,1.788,616,3.461,617,3.805,618,1.788,621,3.461,663,1.496,694,1.788,700,1.626,880,1.788,917,1.626,927,3.075,928,1.788,929,1.788,930,1.788,931,2.005,932,2.005,933,2.005,934,3.101,935,4.267,936,2.005,937,3.101,938,3.101,939,2.005,940,2.005,941,2.005,942,2.005,943,2.005,944,2.005,945,2.005,946,2.005,947,2.005,948,2.005,949,3.101,950,2.005,951,2.005,952,2.005,953,2.005,954,3.101,955,2.005,956,2.005,957,4.614,958,3.792,959,3.101,960,2.005,961,2.005,962,3.101,963,2.005,964,2.005,965,3.792,966,2.005,967,2.005,968,2.005,969,2.005,970,2.005,971,2.005,972,2.005]],["title/interfaces/UserI.html",[228,1.458,395,1.385]],["body/interfaces/UserI.html",[3,0.234,4,0.209,5,0.209,7,0.311,11,0.019,15,1.525,16,0.285,20,0.234,26,0.013,27,0.013,78,0.805,87,2.974,167,1.359,168,2.528,207,4.123,228,2.12,234,1.701,250,1.678,266,3.149,315,4.479,316,4.479,317,3.826,318,4.479,324,4.209,332,4.123,340,2.84,341,2.84,395,1.522,397,2.265,437,4.479,438,4.479,973,3.502]],["title/controllers/UsersController.html",[0,1.317,974,2.585]],["body/controllers/UsersController.html",[0,1.635,2,0.887,3,0.143,4,0.128,5,0.128,7,0.19,8,1.223,10,1.544,11,0.019,12,0.928,14,1.95,15,0.517,16,0.447,17,0.491,20,0.143,21,0.092,24,1.62,26,0.009,27,0.009,75,1.035,78,0.57,105,1.487,106,1.388,107,1.72,112,1.893,116,1.827,117,1.43,118,1.576,122,2.524,125,2.562,127,2.439,128,2.953,129,1.914,130,1.225,133,2.263,135,1.908,143,1.914,145,0.887,147,0.887,148,1.602,152,1.922,153,2.562,154,0.933,157,2.562,159,2.113,160,2.418,163,2.147,175,1.035,227,1.487,228,0.982,234,1.544,250,1.779,356,2.65,371,3.063,381,1.602,382,1.741,392,2.015,493,2.65,495,2.147,498,2.65,504,1.741,506,1.388,507,1.602,508,2.439,509,3.268,511,1.741,512,2.147,513,2.558,514,1.225,515,1.225,523,3.957,525,3.209,528,2.147,655,3.209,663,1.602,675,3.268,676,2.147,888,2.147,917,1.741,930,1.914,974,2.65,975,2.147,976,2.499,977,2.914,978,3.805,979,3.805,980,4.423,981,4.607,982,5.149,983,4.607,984,2.499,985,2.499,986,3.805,987,5.149,988,3.805,989,3.805,990,2.499,991,2.499,992,2.499,993,2.499,994,2.499,995,2.499,996,2.499,997,5.149,998,2.499,999,2.499,1000,2.499,1001,2.147,1002,2.499,1003,2.499,1004,2.499,1005,2.499,1006,2.499,1007,3.805,1008,2.499,1009,2.499]],["title/modules/UsersModule.html",[28,1.317,45,1.819]],["body/modules/UsersModule.html",[2,2.01,3,0.252,4,0.226,5,0.226,11,0.019,16,0.478,17,0.863,20,0.252,21,0.078,26,0.014,27,0.014,28,2.224,30,2.032,31,2.032,32,2.288,33,2.288,34,2.032,35,3.264,36,3.264,45,3.497,46,2.95,47,2.288,48,2.288,50,2.44,56,2.614,57,1.727,112,1.22,135,3.09,540,3.774,754,3.774,929,3.366,974,4.365,1001,3.774,1010,3.774,1011,3.774,1012,3.774,1013,4.394,1014,4.394,1015,4.394,1016,4.394,1017,4.394,1018,4.394]],["title/injectables/UsersService.html",[97,0.847,135,1.537]],["body/injectables/UsersService.html",[3,0.108,4,0.096,5,0.096,7,0.143,8,0.977,11,0.019,12,0.956,14,1.882,15,0.388,16,0.409,17,0.369,20,0.174,21,0.033,23,1.118,24,1.67,26,0.008,27,0.008,57,0.738,71,1.688,78,0.628,84,1.949,97,0.694,98,0.778,107,2.619,112,1.874,113,3.37,116,2.011,117,1.574,118,1.734,120,2.368,122,2.157,125,0.869,130,0.921,133,1.809,135,1.259,145,1.079,147,0.667,152,2.341,153,2.708,154,2.445,160,2.142,168,1.729,227,1.118,228,0.738,234,1.751,241,3.37,242,1.49,250,1.839,317,1.809,371,2.618,391,2.875,392,2.113,395,0.701,471,0.778,487,2.933,497,2.328,506,1.688,507,1.204,513,2.127,514,0.921,515,0.921,565,2.444,578,1.439,579,1.118,609,2.117,615,1.439,616,3.065,617,3.37,618,1.439,621,3.065,655,2.117,663,1.949,687,2.611,694,2.328,700,1.308,880,1.439,917,1.308,927,3.065,928,1.439,929,1.439,930,1.439,931,1.613,932,2.611,933,2.611,934,2.611,935,3.779,936,1.613,937,2.611,938,2.611,939,1.613,940,1.613,941,1.613,942,1.613,943,1.613,944,1.613,945,1.613,946,1.613,947,1.613,948,3.779,949,2.611,950,3.779,951,2.611,952,1.613,953,1.613,954,2.611,955,2.611,956,1.613,957,4.151,958,3.289,959,2.611,960,1.613,961,1.613,962,2.611,963,3.289,964,1.613,965,3.289,966,1.613,967,1.613,968,1.613,969,2.611,970,1.613,971,1.613,972,1.613,980,2.611,1019,3.04,1020,3.04,1021,1.879,1022,1.879,1023,1.879,1024,1.879,1025,1.879,1026,1.879,1027,1.879,1028,1.879,1029,1.879,1030,1.879,1031,1.879,1032,1.879]],["title/coverage.html",[1033,3.878]],["body/coverage.html",[0,2.176,1,1.795,5,0.132,6,2.213,11,0.019,18,1.533,21,0.117,26,0.01,27,0.01,34,1.192,61,1.974,62,1.974,63,1.974,64,1.974,65,1.974,78,0.285,97,1.528,99,2.213,103,1.795,104,2.213,106,2.163,111,1.533,112,1.081,122,1.263,132,1.795,135,1.067,137,1.431,141,1.795,165,2.982,166,2.213,181,1.652,182,1.652,188,1.795,203,1.974,204,2.213,214,2.213,228,1.013,244,1.533,245,2.213,246,2.982,261,1.251,279,1.652,280,2.213,281,2.982,302,1.533,303,2.213,304,2.982,312,1.382,314,2.982,347,1.652,348,2.213,354,1.652,355,2.213,365,1.652,366,2.213,371,1.533,372,2.213,381,1.652,382,1.795,383,2.982,392,1.127,395,2.357,396,1.795,398,2.213,399,2.213,417,2.213,419,2.213,432,1.974,433,2.213,434,2.563,435,1.431,436,2.213,472,1.342,479,1.974,482,1.795,483,2.213,516,1.533,537,1.192,538,1.192,559,2.213,630,2.213,649,1.795,650,2.213,686,2.213,732,1.795,733,2.213,740,1.533,755,2.213,808,2.213,822,1.795,823,2.213,824,2.213,826,1.795,827,2.213,856,2.213,894,2.213,927,1.795,928,2.982,973,2.213,974,1.795,975,2.213,1033,1.974,1034,2.577,1035,2.577,1036,2.577,1037,7.625,1038,5.23,1039,6.314,1040,3.894,1041,6.86,1042,5.616,1043,5.073,1044,6.132,1045,2.213,1046,2.213,1047,2.577,1048,5.616,1049,2.577,1050,4.693,1051,2.577,1052,5.23,1053,2.577,1054,3.894,1055,2.577,1056,2.577,1057,2.577,1058,2.577]],["title/dependencies.html",[31,2.064,1059,2.662]],["body/dependencies.html",[11,0.019,17,0.905,21,0.104,26,0.014,27,0.014,31,2.131,57,1.811,60,3.21,130,2.259,175,1.909,177,3.21,185,3.53,187,2.742,196,3.53,227,2.742,408,4.909,424,3.958,471,1.909,761,3.958,1060,6.409,1061,4.609,1062,4.609,1063,4.609,1064,4.609,1065,4.609,1066,4.609,1067,4.609,1068,4.609,1069,4.609,1070,4.609,1071,4.609,1072,4.609,1073,4.609,1074,4.609,1075,4.609,1076,4.609,1077,4.609,1078,4.609,1079,4.609,1080,4.609,1081,4.609,1082,4.609,1083,4.609,1084,4.609,1085,4.609,1086,4.609,1087,4.609]],["title/miscellaneous/enumerations.html",[1088,1.614,1089,3.833]],["body/miscellaneous/enumerations.html",[7,0.369,11,0.019,26,0.015,27,0.015,112,1.673,253,3.863,332,3.863,392,2.635,1088,2.524,1089,4.162,1090,4.846,1091,6.025,1092,4.846,1093,6.025,1094,4.846,1095,6.426,1096,6.025,1097,4.846,1098,4.846,1099,6.025,1100,6.025,1101,6.025,1102,6.025,1103,4.846,1104,6.025,1105,6.025]],["title/miscellaneous/functions.html",[1088,1.614,1106,3.833]],["body/miscellaneous/functions.html",[7,0.44,11,0.017,26,0.017,27,0.017,34,3.27,1046,4.961,1088,3.008,1106,4.961,1107,5.776]],["title/index.html",[7,0.236,1108,3.1,1109,3.1]],["body/index.html",[4,0.219,11,0.019,26,0.014,27,0.014,286,2.535,565,2.367,774,3.66,977,3.264,1033,3.264,1110,4.262,1111,4.262,1112,5.552,1113,4.262,1114,4.262,1115,4.262,1116,4.262,1117,4.262,1118,4.262,1119,6.176,1120,4.262,1121,4.262,1122,4.262,1123,6.176,1124,7.085,1125,4.262,1126,4.262,1127,4.262,1128,6.957,1129,4.262,1130,5.552,1131,4.262,1132,4.262,1133,4.262,1134,4.262,1135,5.552,1136,5.552,1137,4.262,1138,4.262,1139,4.262,1140,5.552,1141,5.552,1142,4.262,1143,4.262,1144,4.262,1145,4.262,1146,4.262,1147,3.66,1148,4.262,1149,4.262,1150,4.262,1151,4.262,1152,4.262,1153,4.262,1154,4.262,1155,4.262,1156,4.262,1157,3.66,1158,4.262,1159,4.262,1160,4.262,1161,4.262,1162,4.262,1163,4.262,1164,3.66]],["title/modules.html",[30,2.341]],["body/modules.html",[11,0.016,26,0.016,27,0.016,29,3.61,30,2.397,40,3.323,41,3.323,42,2.879,43,3.323,44,2.699,45,2.54,1147,6.353,1165,7.397,1166,7.397,1167,7.397]],["title/overview.html",[1168,4.348]],["body/overview.html",[2,1.176,11,0.019,18,3.228,26,0.012,27,0.012,28,1.176,29,5.099,30,1.532,31,1.532,32,1.726,33,1.726,34,1.532,35,1.726,36,1.726,37,2.846,38,2.846,39,2.846,40,4.528,41,4.668,42,3.992,43,4.668,44,3.529,45,3.423,46,2.437,47,1.726,48,1.726,84,2.124,91,1.971,98,1.373,135,2.748,137,3.013,164,1.449,178,2.846,180,2.846,181,3.478,182,3.478,397,1.84,516,3.228,530,2.846,534,2.846,536,2.846,537,2.876,538,2.985,740,3.228,749,2.846,750,2.846,1010,2.846,1011,2.846,1012,2.846,1168,2.846,1169,4.68,1170,3.313,1171,3.313]],["title/properties.html",[167,1.124,1059,2.662]],["body/properties.html",[11,0.018,26,0.016,27,0.016,167,1.426,529,4.861,977,4.335,1157,4.861,1164,4.861,1172,5.66,1173,5.66,1174,5.66,1175,5.66]],["title/miscellaneous/typealiases.html",[1088,1.614,1176,4.462]],["body/miscellaneous/typealiases.html",[7,0.416,11,0.018,26,0.016,27,0.016,78,0.808,479,4.185,480,4.514,580,5.566,1088,2.845,1177,5.463,1178,5.463,1179,5.463,1180,7.146,1181,5.463]],["title/miscellaneous/variables.html",[1088,1.614,1182,3.833]],["body/miscellaneous/variables.html",[7,0.325,11,0.019,15,1.464,24,1.183,26,0.014,27,0.014,61,4.73,62,4.73,63,4.73,64,4.73,65,4.73,78,0.771,112,1.884,152,2.072,153,2.568,188,4.301,453,5.426,1043,3.66,1045,3.66,1088,2.22,1095,6.085,1182,3.66,1183,6.957,1184,4.262,1185,4.262,1186,4.262,1187,4.262,1188,4.262,1189,4.262,1190,4.262,1191,4.262]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1172,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1071,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1079,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1085,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1070,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1072,"title":{},"body":{"dependencies.html":{}}}],["0.7.5",{"_index":1084,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1042,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1048,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1049,"title":{},"body":{"coverage.html":{}}}],["05",{"_index":793,"title":{},"body":{"injectables/SearchService.html":{}}}],["1.0.0",{"_index":1074,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["10.0.2",{"_index":1067,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1063,"title":{},"body":{"dependencies.html":{}}}],["10.3.8",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":1170,"title":{},"body":{"overview.html":{}}}],["2.4.3",{"_index":1068,"title":{},"body":{"dependencies.html":{}}}],["2/7",{"_index":1056,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["2021",{"_index":792,"title":{},"body":{"injectables/SearchService.html":{}}}],["25",{"_index":794,"title":{},"body":{"injectables/SearchService.html":{}}}],["28",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["3.2.2",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":907,"title":{},"body":{"entities/User.html":{}}}],["4",{"_index":530,"title":{},"body":{"controllers/ReservationsController.html":{},"overview.html":{}}}],["4.0.1",{"_index":1073,"title":{},"body":{"dependencies.html":{}}}],["5.0.7",{"_index":1081,"title":{},"body":{"dependencies.html":{}}}],["60m",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["7",{"_index":1169,"title":{},"body":{"overview.html":{}}}],["7.3.1",{"_index":1066,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1171,"title":{},"body":{"overview.html":{}}}],["8.11.5",{"_index":1076,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["accepted",{"_index":1096,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accesstoken",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["addselect('user.password",{"_index":972,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["adduser",{"_index":979,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduser(@body",{"_index":1003,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduser(dto",{"_index":984,"title":{},"body":{"controllers/UsersController.html":{}}}],["admin",{"_index":1104,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["adresie",{"_index":938,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["aliases",{"_index":1177,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":1148,"title":{},"body":{"index.html":{}}}],["anulowana",{"_index":271,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["apiproperty",{"_index":176,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty()@isdatestring",{"_index":319,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring",{"_index":171,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{}}}],["apiproperty()@isstring()@isemail",{"_index":169,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@length(6",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@maxlength(20",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@maxlength(30",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apipropertyoptional",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{}}}],["apipropertyoptional()@isboolean()@isoptional",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apipropertyoptional()@isenum(userrole)@isoptional",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apipropertyoptional()@isoptional",{"_index":373,"title":{},"body":{"classes/EditUserDto.html":{}}}],["app",{"_index":1126,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1118,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arrival_date",{"_index":282,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{},"entities/Route.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["async",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthRegisterDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["auth.controller",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":103,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":390,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":384,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":418,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authlogindto",{"_index":111,"title":{"classes/AuthLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authlogindto:13",{"_index":213,"title":{},"body":{"classes/AuthRegisterDto.html":{}}}],["authlogindto:9",{"_index":212,"title":{},"body":{"classes/AuthRegisterDto.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1157,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authregisterdto",{"_index":203,"title":{"classes/AuthRegisterDto.html":{}},"body":{"classes/AuthRegisterDto.html":{},"coverage.html":{}}}],["authservice",{"_index":137,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":1149,"title":{},"body":{"index.html":{}}}],["badrequestexception('użytkownik",{"_index":939,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["bcryptjs",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["beforeinsert",{"_index":918,"title":{},"body":{"entities/User.html":{}}}],["beforeupdate",{"_index":919,"title":{},"body":{"entities/User.html":{}}}],["bielecki",{"_index":1175,"title":{},"body":{"properties.html":{}}}],["birth_date",{"_index":896,"title":{},"body":{"entities/User.html":{}}}],["birthdate",{"_index":315,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["body",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1167,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1165,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1113,"title":{},"body":{"index.html":{}}}],["canceled",{"_index":1102,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cascade",{"_index":478,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["cascade'})@joincolumn",{"_index":637,"title":{},"body":{"entities/Route.html":{}}}],["cascade'})@jointable",{"_index":449,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{}}}],["class",{"_index":21,"title":{"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":164,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule",{"_index":534,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule_imports",{"_index":535,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["cluster_reservationsmodule_providers",{"_index":536,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_routesmodule",{"_index":678,"title":{},"body":{"modules/RoutesModule.html":{}}}],["cluster_routesmodule_imports",{"_index":679,"title":{},"body":{"modules/RoutesModule.html":{}}}],["cluster_routesmodule_providers",{"_index":680,"title":{},"body":{"modules/RoutesModule.html":{}}}],["cluster_searchmodule",{"_index":749,"title":{},"body":{"modules/SearchModule.html":{},"overview.html":{}}}],["cluster_searchmodule_imports",{"_index":751,"title":{},"body":{"modules/SearchModule.html":{}}}],["cluster_searchmodule_providers",{"_index":750,"title":{},"body":{"modules/SearchModule.html":{},"overview.html":{}}}],["cluster_stopsmodule",{"_index":851,"title":{},"body":{"modules/StopsModule.html":{}}}],["cluster_stopsmodule_providers",{"_index":852,"title":{},"body":{"modules/StopsModule.html":{}}}],["cluster_usersmodule",{"_index":1010,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1011,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1012,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":462,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["column({default",{"_index":904,"title":{},"body":{"entities/User.html":{}}}],["column({name",{"_index":895,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":814,"title":{},"body":{"entities/Stop.html":{}}}],["column({select",{"_index":909,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":451,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["column({unique",{"_index":817,"title":{},"body":{"entities/Stop.html":{},"entities/User.html":{}}}],["compare",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(password",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["config.get(database_host",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(database_name",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(database_password",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(database_username",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(jwt_secret",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["config/constants",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["confirmed",{"_index":1100,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connection",{"_index":682,"title":{},"body":{"modules/RoutesModule.html":{}}}],["console.log(tempdata1",{"_index":784,"title":{},"body":{"injectables/SearchService.html":{}}}],["console.log(userid",{"_index":605,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["const",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":420,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(reservationrepository",{"_index":564,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["constructor(routerepository",{"_index":690,"title":{},"body":{"injectables/RoutesService.html":{},"injectables/SearchService.html":{}}}],["constructor(stoprepository",{"_index":859,"title":{},"body":{"injectables/StopsService.html":{}}}],["constructor(userrepository",{"_index":1021,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["containing",{"_index":987,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/SearchController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/SearchController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('reservations",{"_index":518,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["controller('routes",{"_index":668,"title":{},"body":{"controllers/RoutesController.html":{}}}],["controller('search",{"_index":742,"title":{},"body":{"controllers/SearchController.html":{}}}],["controller('stops",{"_index":843,"title":{},"body":{"controllers/StopsController.html":{}}}],["controller('users",{"_index":1002,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":1033,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":352,"title":{},"body":{"classes/EditReservationDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{}}}],["created_at",{"_index":440,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["createdat",{"_index":437,"title":{},"body":{"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["createdatecolumn",{"_index":463,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":439,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["createone",{"_index":1019,"title":{},"body":{"injectables/UsersService.html":{}}}],["createone(dto",{"_index":933,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["createparamdecorator",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('user",{"_index":970,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["createreservation",{"_index":484,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["createreservation(@body",{"_index":521,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["createreservation(dto",{"_index":490,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["createreservationdto",{"_index":244,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"classes/EditReservationDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"coverage.html":{}}}],["createreservationdto:10",{"_index":351,"title":{},"body":{"classes/EditReservationDto.html":{}}}],["createreservationdto:17",{"_index":350,"title":{},"body":{"classes/EditReservationDto.html":{}}}],["createreservationdto:20",{"_index":349,"title":{},"body":{"classes/EditReservationDto.html":{}}}],["createroute",{"_index":651,"title":{},"body":{"controllers/RoutesController.html":{},"injectables/RoutesService.html":{}}}],["createroute(@body",{"_index":671,"title":{},"body":{"controllers/RoutesController.html":{}}}],["createroute(dto",{"_index":656,"title":{},"body":{"controllers/RoutesController.html":{},"injectables/RoutesService.html":{}}}],["createroutedto",{"_index":279,"title":{"classes/CreateRouteDto.html":{}},"body":{"classes/CreateRouteDto.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"coverage.html":{}}}],["creates",{"_index":986,"title":{},"body":{"controllers/UsersController.html":{}}}],["createstop",{"_index":828,"title":{},"body":{"controllers/StopsController.html":{},"injectables/StopsService.html":{}}}],["createstop(@body",{"_index":846,"title":{},"body":{"controllers/StopsController.html":{}}}],["createstop(dto",{"_index":833,"title":{},"body":{"controllers/StopsController.html":{},"injectables/StopsService.html":{}}}],["createstopdto",{"_index":302,"title":{"classes/CreateStopDto.html":{}},"body":{"classes/CreateStopDto.html":{},"classes/EditStopDto.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"coverage.html":{}}}],["createstopdto:13",{"_index":368,"title":{},"body":{"classes/EditStopDto.html":{}}}],["createstopdto:17",{"_index":369,"title":{},"body":{"classes/EditStopDto.html":{}}}],["createstopdto:8",{"_index":367,"title":{},"body":{"classes/EditStopDto.html":{}}}],["createuserdto",{"_index":122,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto:10",{"_index":375,"title":{},"body":{"classes/EditUserDto.html":{}}}],["createuserdto:14",{"_index":379,"title":{},"body":{"classes/EditUserDto.html":{}}}],["createuserdto:18",{"_index":376,"title":{},"body":{"classes/EditUserDto.html":{}}}],["createuserdto:22",{"_index":378,"title":{},"body":{"classes/EditUserDto.html":{}}}],["createuserdto:26",{"_index":374,"title":{},"body":{"classes/EditUserDto.html":{}}}],["createuserdto:30",{"_index":377,"title":{},"body":{"classes/EditUserDto.html":{}}}],["createuserdto:34",{"_index":380,"title":{},"body":{"classes/EditUserDto.html":{}}}],["createuserreservation",{"_index":560,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["ctx",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dane",{"_index":430,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["danych",{"_index":873,"title":{},"body":{"injectables/StopsService.html":{}}}],["data",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{},"modules/ReservationsModule.html":{},"injectables/SearchService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["database_host",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database_name",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database_password",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database_port",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["database_username",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":266,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateUserDto.html":{},"classes/EditRouteDto.html":{},"classes/EditUserDto.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"entities/Route.html":{},"injectables/SearchService.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"controllers/SearchController.html":{},"entities/Stop.html":{},"controllers/StopsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":453,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":506,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/StopsController.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":504,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@useguards(jwtauthguard",{"_index":995,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteone",{"_index":687,"title":{},"body":{"injectables/RoutesService.html":{},"injectables/UsersService.html":{}}}],["deleteone(id",{"_index":694,"title":{},"body":{"injectables/RoutesService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["deletestop",{"_index":857,"title":{},"body":{"injectables/StopsService.html":{}}}],["deletestop(id",{"_index":862,"title":{},"body":{"injectables/StopsService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":977,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1127,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":767,"title":{},"body":{"injectables/SearchService.html":{}}}],["docelowy",{"_index":300,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{}}}],["documentation",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["driver",{"_index":356,"title":{},"body":{"classes/EditRouteDto.html":{},"entities/Route.html":{},"injectables/RoutesService.html":{},"controllers/UsersController.html":{}}}],["driver.route",{"_index":632,"title":{},"body":{"entities/Route.html":{}}}],["driverid",{"_index":283,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{}}}],["dto",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.arrival_date",{"_index":709,"title":{},"body":{"injectables/RoutesService.html":{}}}],["dto.email",{"_index":936,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["dto.from",{"_index":586,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["dto.lat",{"_index":884,"title":{},"body":{"injectables/StopsService.html":{}}}],["dto.lng",{"_index":886,"title":{},"body":{"injectables/StopsService.html":{}}}],["dto.name",{"_index":875,"title":{},"body":{"injectables/StopsService.html":{}}}],["dto.status",{"_index":590,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["dto.to",{"_index":588,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["dto/auth",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":514,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/edit",{"_index":515,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":760,"title":{},"body":{"injectables/SearchService.html":{}}}],["e2e",{"_index":1137,"title":{},"body":{"index.html":{}}}],["editedreservation",{"_index":622,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["editedreservation.user",{"_index":624,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["editone",{"_index":485,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["editone(id",{"_index":492,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["editreservationdto",{"_index":347,"title":{"classes/EditReservationDto.html":{}},"body":{"classes/EditReservationDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"coverage.html":{}}}],["editroutedto",{"_index":354,"title":{"classes/EditRouteDto.html":{}},"body":{"classes/EditRouteDto.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"coverage.html":{}}}],["editstop",{"_index":858,"title":{},"body":{"injectables/StopsService.html":{}}}],["editstop(id",{"_index":864,"title":{},"body":{"injectables/StopsService.html":{}}}],["editstopdto",{"_index":365,"title":{"classes/EditStopDto.html":{}},"body":{"classes/EditStopDto.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"coverage.html":{}}}],["edituser",{"_index":997,"title":{},"body":{"controllers/UsersController.html":{}}}],["edituserdto",{"_index":371,"title":{"classes/EditUserDto.html":{}},"body":{"classes/EditUserDto.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["edytowany",{"_index":676,"title":{},"body":{"controllers/RoutesController.html":{},"controllers/UsersController.html":{}}}],["efficient",{"_index":1114,"title":{},"body":{"index.html":{}}}],["email",{"_index":168,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"injectables/UsersService.html":{}}}],["emailtolowercase",{"_index":924,"title":{},"body":{"entities/User.html":{}}}],["employee",{"_index":1105,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["end",{"_index":284,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{},"entities/Route.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{}}}],["endid",{"_index":285,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{}}}],["entities",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"entities/Reservation.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/reservation.entity",{"_index":552,"title":{},"body":{"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{}}}],["entities/route.entity",{"_index":666,"title":{},"body":{"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{}}}],["entities/stop.entity",{"_index":855,"title":{},"body":{"modules/StopsModule.html":{},"injectables/StopsService.html":{}}}],["entities/user.entity",{"_index":929,"title":{},"body":{"interfaces/UserFindOne.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":434,"title":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{}},"body":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('reservation",{"_index":475,"title":{},"body":{"entities/Reservation.html":{}}}],["entity('route",{"_index":648,"title":{},"body":{"entities/Route.html":{}}}],["entity('stop",{"_index":819,"title":{},"body":{"entities/Stop.html":{}}}],["entity{.ts,.js",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":452,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1089,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/reservation",{"_index":263,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{}}}],["enums/user",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["env",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":388,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["errorhttpstatuscode",{"_index":1006,"title":{},"body":{"controllers/UsersController.html":{}}}],["example",{"_index":1123,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":761,"title":{},"body":{"injectables/SearchService.html":{},"dependencies.html":{}}}],["extends",{"_index":205,"title":{},"body":{"classes/AuthRegisterDto.html":{},"classes/EditReservationDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filterroute",{"_index":735,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["filterroute(@query",{"_index":744,"title":{},"body":{"controllers/SearchController.html":{}}}],["filterroute(from",{"_index":758,"title":{},"body":{"injectables/SearchService.html":{}}}],["filterroute(params",{"_index":736,"title":{},"body":{"controllers/SearchController.html":{}}}],["finddriver",{"_index":950,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":963,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["findone(data",{"_index":969,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["first_name",{"_index":900,"title":{},"body":{"entities/User.html":{}}}],["firstname",{"_index":316,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["firststop",{"_index":809,"title":{},"body":{"entities/Stop.html":{}}}],["fistname",{"_index":206,"title":{},"body":{"classes/AuthRegisterDto.html":{}}}],["forbiddenexception",{"_index":999,"title":{},"body":{"controllers/UsersController.html":{}}}],["forwardref",{"_index":550,"title":{},"body":{"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{}}}],["framework",{"_index":1112,"title":{},"body":{"index.html":{}}}],["from(this.routerepository.delete(id",{"_index":731,"title":{},"body":{"injectables/RoutesService.html":{}}}],["from(this.userrepository.delete(id",{"_index":961,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["fromdata",{"_index":785,"title":{},"body":{"injectables/SearchService.html":{}}}],["function",{"_index":1047,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1106,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funkcja",{"_index":943,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["get('/driver",{"_index":989,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":498,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}}}],["get('tickets/:id",{"_index":501,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["get()@useguards(jwtauthguard",{"_index":495,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["getall",{"_index":486,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["getallreservations",{"_index":561,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["getallroutes",{"_index":688,"title":{},"body":{"injectables/RoutesService.html":{}}}],["getallusers",{"_index":948,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["getdriver",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getdriver(id",{"_index":951,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmanager().query",{"_index":765,"title":{},"body":{"injectables/SearchService.html":{}}}],["getone",{"_index":487,"title":{},"body":{"controllers/ReservationsController.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["getone(id",{"_index":497,"title":{},"body":{"controllers/ReservationsController.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["getonereservation",{"_index":562,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["getonereservation(id",{"_index":572,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["getoneroute",{"_index":652,"title":{},"body":{"controllers/RoutesController.html":{}}}],["getoneroute(id",{"_index":658,"title":{},"body":{"controllers/RoutesController.html":{}}}],["getoneuser",{"_index":1020,"title":{},"body":{"injectables/UsersService.html":{}}}],["getoneuser(id",{"_index":955,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["getreservationsresponse",{"_index":480,"title":{},"body":{"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"miscellaneous/typealiases.html":{}}}],["getroute",{"_index":689,"title":{},"body":{"injectables/RoutesService.html":{}}}],["getroute(id",{"_index":697,"title":{},"body":{"injectables/RoutesService.html":{}}}],["getroutes",{"_index":653,"title":{},"body":{"controllers/RoutesController.html":{}}}],["getstop",{"_index":829,"title":{},"body":{"controllers/StopsController.html":{},"injectables/StopsService.html":{}}}],["getstop(id",{"_index":835,"title":{},"body":{"controllers/StopsController.html":{},"injectables/StopsService.html":{}}}],["getstops",{"_index":830,"title":{},"body":{"controllers/StopsController.html":{},"injectables/StopsService.html":{}}}],["getticketresponse",{"_index":580,"title":{},"body":{"injectables/ReservationsService.html":{},"miscellaneous/typealiases.html":{}}}],["getting",{"_index":1108,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(id",{"_index":991,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserticket",{"_index":488,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["getuserticket(id",{"_index":500,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["group",{"_index":779,"title":{},"body":{"injectables/SearchService.html":{}}}],["grow",{"_index":1144,"title":{},"body":{"index.html":{}}}],["guard",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["guard.ts",{"_index":383,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:6",{"_index":387,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["guards/local",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlerequest",{"_index":385,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":386,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":917,"title":{},"body":{"entities/User.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["hash(this.password",{"_index":923,"title":{},"body":{"entities/User.html":{}}}],["hash(user.password",{"_index":959,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["hashpassword",{"_index":921,"title":{},"body":{"entities/User.html":{}}}],["having",{"_index":780,"title":{},"body":{"injectables/SearchService.html":{}}}],["hello",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1154,"title":{},"body":{"index.html":{}}}],["host",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":700,"title":{},"body":{"injectables/RoutesService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["httpexception(\"przystanek",{"_index":876,"title":{},"body":{"injectables/StopsService.html":{}}}],["httpexception(\"użytkownik",{"_index":937,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["httpexception('nie",{"_index":952,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["https://nestjs.com",{"_index":1161,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":507,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.conflict",{"_index":880,"title":{},"body":{"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["httpstatus.forbidden",{"_index":528,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.not_found",{"_index":954,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["id",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateStopDto.html":{},"classes/EditStopDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["if(!reservation",{"_index":619,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["if(!ticket",{"_index":608,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["if(!user",{"_index":428,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["if(data.length",{"_index":791,"title":{},"body":{"injectables/SearchService.html":{}}}],["if(reservations.length",{"_index":604,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["if(route.driverid",{"_index":719,"title":{},"body":{"injectables/RoutesService.html":{}}}],["if(route.endid",{"_index":724,"title":{},"body":{"injectables/RoutesService.html":{}}}],["if(route.startid",{"_index":722,"title":{},"body":{"injectables/RoutesService.html":{}}}],["if(stopexist",{"_index":889,"title":{},"body":{"injectables/StopsService.html":{}}}],["if(user.password",{"_index":956,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{}}}],["in_progress",{"_index":1097,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inherited",{"_index":211,"title":{},"body":{"classes/AuthRegisterDto.html":{},"classes/EditReservationDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{}}}],["inject",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}}}],["inject(authservice",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["inject(forwardref",{"_index":583,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["inject(jwtservice",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(reservationsservice",{"_index":519,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["inject(routesservice",{"_index":669,"title":{},"body":{"controllers/RoutesController.html":{},"injectables/SearchService.html":{}}}],["inject(searchservice",{"_index":743,"title":{},"body":{"controllers/SearchController.html":{}}}],["inject(stopsservice",{"_index":703,"title":{},"body":{"injectables/RoutesService.html":{},"controllers/StopsController.html":{}}}],["inject(usersservice",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"controllers/UsersController.html":{}}}],["injectable",{"_index":97,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"injectables/StopsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"injectables/StopsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":579,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["injectrepository(reservation",{"_index":582,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["injectrepository(route",{"_index":702,"title":{},"body":{"injectables/RoutesService.html":{},"injectables/SearchService.html":{}}}],["injectrepository(stop",{"_index":763,"title":{},"body":{"injectables/SearchService.html":{},"injectables/StopsService.html":{}}}],["injectrepository(user",{"_index":931,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["inner",{"_index":773,"title":{},"body":{"injectables/SearchService.html":{}}}],["installation",{"_index":1122,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1125,"title":{},"body":{"index.html":{}}}],["interface",{"_index":395,"title":{"interfaces/JwtPayload.html":{},"interfaces/LoginInterface.html":{},"interfaces/ReservationI.html":{},"interfaces/StopResponse.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/LoginInterface.html":{},"interfaces/ReservationI.html":{},"interfaces/StopResponse.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["interface/jwtpayload.interface",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces",{"_index":397,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/LoginInterface.html":{},"interfaces/ReservationI.html":{},"interfaces/StopResponse.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"overview.html":{}}}],["interfaces/reservation.model",{"_index":473,"title":{},"body":{"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["interfaces/stop",{"_index":868,"title":{},"body":{"injectables/StopsService.html":{}}}],["interfaces/ticket.model",{"_index":581,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["interfaces/user.interface",{"_index":930,"title":{},"body":{"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isarray",{"_index":294,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/EditRouteDto.html":{}}}],["isboolean",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{}}}],["isdate",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{}}}],["isdatestring",{"_index":257,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateUserDto.html":{},"classes/EditRouteDto.html":{}}}],["isdatestring()@isoptional",{"_index":357,"title":{},"body":{"classes/EditRouteDto.html":{}}}],["isemail",{"_index":173,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{}}}],["isemail()@isstring",{"_index":208,"title":{},"body":{"classes/AuthRegisterDto.html":{}}}],["isemployee",{"_index":317,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"injectables/UsersService.html":{}}}],["isenum",{"_index":258,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{}}}],["isenum(reservationstatus",{"_index":267,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isenum(userrole",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["islowercase",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{}}}],["isnotempty",{"_index":259,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isnumber",{"_index":260,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/EditRouteDto.html":{}}}],["isnumber()@isoptional",{"_index":307,"title":{},"body":{"classes/CreateStopDto.html":{},"classes/EditStopDto.html":{}}}],["isobject",{"_index":295,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{}}}],["isoptional",{"_index":251,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{}}}],["isoptional()@isenum(reservationstatus",{"_index":254,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/EditReservationDto.html":{}}}],["isoptional()@isnumber",{"_index":309,"title":{},"body":{"classes/CreateStopDto.html":{},"classes/EditStopDto.html":{}}}],["isstring",{"_index":174,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditRouteDto.html":{},"classes/EditUserDto.html":{}}}],["istnieje",{"_index":621,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["jakiej",{"_index":545,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["jasło",{"_index":797,"title":{},"body":{"injectables/SearchService.html":{}}}],["join",{"_index":774,"title":{},"body":{"injectables/SearchService.html":{},"index.html":{}}}],["joincolumn",{"_index":464,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/User.html":{}}}],["jointable",{"_index":465,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{}}}],["ju",{"_index":879,"title":{},"body":{"injectables/StopsService.html":{}}}],["jwt",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_secret",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":381,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":396,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":181,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1158,"title":{},"body":{"index.html":{}}}],["kierowcy",{"_index":953,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["kogo",{"_index":543,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["kraków",{"_index":807,"title":{},"body":{"injectables/SearchService.html":{}}}],["kursu",{"_index":799,"title":{},"body":{"injectables/SearchService.html":{}}}],["last_name",{"_index":906,"title":{},"body":{"entities/User.html":{}}}],["lastname",{"_index":207,"title":{},"body":{"classes/AuthRegisterDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["laststop",{"_index":810,"title":{},"body":{"entities/Stop.html":{}}}],["lat",{"_index":305,"title":{},"body":{"classes/CreateStopDto.html":{},"classes/EditStopDto.html":{},"entities/Stop.html":{}}}],["left",{"_index":804,"title":{},"body":{"injectables/SearchService.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"entities/User.html":{}}}],["length(6",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1164,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1141,"title":{},"body":{"index.html":{}}}],["literal",{"_index":1180,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lng",{"_index":306,"title":{},"body":{"classes/CreateStopDto.html":{},"classes/EditStopDto.html":{},"entities/Stop.html":{}}}],["local",{"_index":424,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":141,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":182,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logging",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(dto",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(logindto",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["login.dto",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{}}}],["login.dto.ts",{"_index":166,"title":{},"body":{"classes/AuthLoginDto.html":{},"coverage.html":{}}}],["login.dto.ts:13",{"_index":172,"title":{},"body":{"classes/AuthLoginDto.html":{}}}],["login.dto.ts:9",{"_index":170,"title":{},"body":{"classes/AuthLoginDto.html":{}}}],["logindto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["logininterface",{"_index":432,"title":{"interfaces/LoginInterface.html":{}},"body":{"interfaces/LoginInterface.html":{},"coverage.html":{}}}],["logowania",{"_index":431,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["malo",{"_index":275,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["manytomany",{"_index":647,"title":{},"body":{"entities/Route.html":{},"entities/Stop.html":{}}}],["manytoone",{"_index":466,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["manytoone(type",{"_index":911,"title":{},"body":{"entities/User.html":{}}}],["manytoone(undefined",{"_index":446,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/User.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{}}}],["maxlength(20",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(30",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ReservationI.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"interfaces/StopResponse.html":{},"injectables/StopsService.html":{},"controllers/UsersController.html":{}}}],["metadata",{"_index":1078,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miejsc",{"_index":276,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["miejsca",{"_index":541,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["miscellaneous",{"_index":1088,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1140,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1130,"title":{},"body":{"index.html":{}}}],["modu",{"_index":540,"title":{},"body":{"modules/ReservationsModule.html":{},"modules/UsersModule.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1153,"title":{},"body":{"index.html":{}}}],["morethanorequal",{"_index":762,"title":{},"body":{"injectables/SearchService.html":{}}}],["morethanorequal(arrival_date",{"_index":789,"title":{},"body":{"injectables/SearchService.html":{}}}],["myśliwiec",{"_index":1159,"title":{},"body":{"index.html":{}}}],["name",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateStopDto.html":{},"classes/EditStopDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nazwa",{"_index":803,"title":{},"body":{"injectables/SearchService.html":{}}}],["nazwie",{"_index":878,"title":{},"body":{"injectables/StopsService.html":{}}}],["nest",{"_index":1119,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1163,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1065,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":177,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":392,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["newreservation",{"_index":584,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["newreservation.from",{"_index":585,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["newreservation.route",{"_index":595,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["newreservation.status",{"_index":589,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["newreservation.to",{"_index":587,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["newreservation.user",{"_index":593,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["newroute",{"_index":707,"title":{},"body":{"injectables/RoutesService.html":{}}}],["newroute.arrival_date",{"_index":708,"title":{},"body":{"injectables/RoutesService.html":{}}}],["newroute.driver",{"_index":715,"title":{},"body":{"injectables/RoutesService.html":{}}}],["newroute.end",{"_index":714,"title":{},"body":{"injectables/RoutesService.html":{}}}],["newroute.start",{"_index":713,"title":{},"body":{"injectables/RoutesService.html":{}}}],["newstop",{"_index":881,"title":{},"body":{"injectables/StopsService.html":{}}}],["newstop.lat",{"_index":883,"title":{},"body":{"injectables/StopsService.html":{}}}],["newstop.lng",{"_index":885,"title":{},"body":{"injectables/StopsService.html":{}}}],["newstop.name",{"_index":882,"title":{},"body":{"injectables/StopsService.html":{}}}],["newuser",{"_index":940,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["nie",{"_index":609,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["nieudana",{"_index":394,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["node.js",{"_index":1111,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":578,"title":{},"body":{"injectables/ReservationsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('użytkownik",{"_index":968,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`nie",{"_index":614,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["notfoundexception(`rezerwacja",{"_index":620,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["nowa",{"_index":269,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["np",{"_index":273,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["npm",{"_index":1124,"title":{},"body":{"index.html":{}}}],["null",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateStopDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"entities/Route.html":{},"injectables/RoutesService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["null'})@jointable",{"_index":634,"title":{},"body":{"entities/Route.html":{}}}],["nullable",{"_index":821,"title":{},"body":{"entities/Stop.html":{},"entities/User.html":{}}}],["number",{"_index":250,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"interfaces/JwtPayload.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"entities/Stop.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numer",{"_index":298,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{},"modules/ReservationsModule.html":{},"injectables/SearchService.html":{}}}],["numerze",{"_index":618,"title":{},"body":{"injectables/ReservationsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["o",{"_index":616,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":988,"title":{},"body":{"controllers/UsersController.html":{}}}],["object.assign(reservation",{"_index":623,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["observable",{"_index":513,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["odjazdu",{"_index":548,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["odrzucona",{"_index":272,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["ondelete",{"_index":448,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["onetomany",{"_index":467,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":640,"title":{},"body":{"entities/Route.html":{},"entities/Stop.html":{}}}],["onetoone",{"_index":468,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["open",{"_index":1142,"title":{},"body":{"index.html":{}}}],["optional",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1168,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1059,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":508,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/SearchController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":525,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":738,"title":{},"body":{"controllers/SearchController.html":{}}}],["params.arrival_date",{"_index":747,"title":{},"body":{"controllers/SearchController.html":{}}}],["params.from",{"_index":745,"title":{},"body":{"controllers/SearchController.html":{}}}],["params.to",{"_index":746,"title":{},"body":{"controllers/SearchController.html":{}}}],["parseint(config.get(database_port",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":509,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["parseuuidpipe",{"_index":510,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["parseuuidpipe({errorhttpstatuscode",{"_index":527,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["passport",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":405,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":400,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["passwordfield",{"_index":426,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["patch",{"_index":511,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":493,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["pg",{"_index":1075,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":1151,"title":{},"body":{"index.html":{}}}],["pobra",{"_index":612,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/StopsService.html":{}}}],["pobrano",{"_index":871,"title":{},"body":{"injectables/StopsService.html":{}}}],["podanym",{"_index":617,"title":{},"body":{"injectables/ReservationsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["podróży",{"_index":301,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{},"injectables/SearchService.html":{}}}],["pomyślnie",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"injectables/StopsService.html":{},"controllers/UsersController.html":{}}}],["port",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["potwierdzona",{"_index":270,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["prefix",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationsController.html":{},"controllers/RoutesController.html":{},"controllers/SearchController.html":{},"controllers/StopsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":469,"title":{},"body":{"entities/Reservation.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":476,"title":{},"body":{"entities/Reservation.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":443,"title":{},"body":{"entities/Reservation.html":{}}}],["private",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":1132,"title":{},"body":{"index.html":{}}}],["progress",{"_index":1098,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["progressive",{"_index":1110,"title":{},"body":{"index.html":{}}}],["project",{"_index":1143,"title":{},"body":{"index.html":{}}}],["promise",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":167,"title":{"properties.html":{}},"body":{"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"entities/Route.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["przemyśl",{"_index":806,"title":{},"body":{"injectables/SearchService.html":{}}}],["przyjazdu",{"_index":549,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["przypisana",{"_index":544,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["przystanek",{"_index":796,"title":{},"body":{"injectables/SearchService.html":{},"injectables/StopsService.html":{}}}],["przystanki",{"_index":805,"title":{},"body":{"injectables/SearchService.html":{}}}],["przystanki.id",{"_index":801,"title":{},"body":{"injectables/SearchService.html":{}}}],["przystanki.name",{"_index":802,"title":{},"body":{"injectables/SearchService.html":{}}}],["przystanku",{"_index":299,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{},"injectables/SearchService.html":{}}}],["punkt",{"_index":296,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{}}}],["put",{"_index":512,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["query",{"_index":739,"title":{},"body":{"controllers/SearchController.html":{}}}],["read",{"_index":1152,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"injectables/ReservationsService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":1077,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(dto",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register.dto.ts",{"_index":204,"title":{},"body":{"classes/AuthRegisterDto.html":{},"coverage.html":{}}}],["register.dto.ts:11",{"_index":210,"title":{},"body":{"classes/AuthRegisterDto.html":{}}}],["register.dto.ts:8",{"_index":209,"title":{},"body":{"classes/AuthRegisterDto.html":{}}}],["rejected",{"_index":1099,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["relations",{"_index":601,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{}}}],["removereservation",{"_index":489,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["removereservation(id",{"_index":503,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["removeroute",{"_index":654,"title":{},"body":{"controllers/RoutesController.html":{}}}],["removeroute(id",{"_index":661,"title":{},"body":{"controllers/RoutesController.html":{}}}],["removestop",{"_index":831,"title":{},"body":{"controllers/StopsController.html":{}}}],["removestop(@param('id",{"_index":849,"title":{},"body":{"controllers/StopsController.html":{}}}],["removestop(id",{"_index":838,"title":{},"body":{"controllers/StopsController.html":{}}}],["removeuser",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{}}}],["removeuser(id",{"_index":994,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":565,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["request",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reservacja",{"_index":596,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservation",{"_index":435,"title":{"entities/Reservation.html":{}},"body":{"entities/Reservation.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"entities/User.html":{},"coverage.html":{}}}],["reservation.dto",{"_index":353,"title":{},"body":{"classes/EditReservationDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["reservation.dto.ts",{"_index":246,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/EditReservationDto.html":{},"coverage.html":{}}}],["reservation.dto.ts:10",{"_index":256,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:17",{"_index":255,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:20",{"_index":252,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.route",{"_index":641,"title":{},"body":{"entities/Route.html":{}}}],["reservation.user",{"_index":912,"title":{},"body":{"entities/User.html":{}}}],["reservationdate",{"_index":265,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservationi",{"_index":472,"title":{"interfaces/ReservationI.html":{}},"body":{"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"entities/User.html":{},"coverage.html":{}}}],["reservationrepository",{"_index":568,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservations",{"_index":481,"title":{},"body":{"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"entities/User.html":{}}}],["reservations.controller",{"_index":551,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["reservations.service",{"_index":517,"title":{},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{}}}],["reservations/reservations.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["reservationscontroller",{"_index":482,"title":{"controllers/ReservationsController.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"coverage.html":{}}}],["reservationservice",{"_index":520,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["reservationsmodule",{"_index":41,"title":{"modules/ReservationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules.html":{},"overview.html":{}}}],["reservationsservice",{"_index":516,"title":{"injectables/ReservationsService.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"coverage.html":{},"overview.html":{}}}],["reservationstatus",{"_index":253,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/EditReservationDto.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"miscellaneous/enumerations.html":{}}}],["reservationstatus.new",{"_index":477,"title":{},"body":{"entities/Reservation.html":{}}}],["reset",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response.model",{"_index":869,"title":{},"body":{"injectables/StopsService.html":{}}}],["response.model.ts",{"_index":824,"title":{},"body":{"interfaces/StopResponse.html":{},"coverage.html":{}}}],["rest",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rezerwacja",{"_index":627,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["rezerwacji",{"_index":268,"title":{},"body":{"classes/CreateReservationDto.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{}}}],["rimraf",{"_index":1080,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":318,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["role.enum",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["role.enum.ts",{"_index":1093,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["route",{"_index":312,"title":{"entities/Route.html":{}},"body":{"classes/CreateStopDto.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"entities/User.html":{},"coverage.html":{}}}],["route.arrival_date",{"_index":769,"title":{},"body":{"injectables/SearchService.html":{}}}],["route.driver",{"_index":721,"title":{},"body":{"injectables/RoutesService.html":{},"entities/User.html":{}}}],["route.driverid",{"_index":726,"title":{},"body":{"injectables/RoutesService.html":{}}}],["route.dto",{"_index":665,"title":{},"body":{"controllers/RoutesController.html":{},"injectables/RoutesService.html":{}}}],["route.dto.ts",{"_index":281,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{},"coverage.html":{}}}],["route.dto.ts:10",{"_index":293,"title":{},"body":{"classes/CreateRouteDto.html":{}}}],["route.dto.ts:11",{"_index":364,"title":{},"body":{"classes/EditRouteDto.html":{}}}],["route.dto.ts:13",{"_index":291,"title":{},"body":{"classes/CreateRouteDto.html":{}}}],["route.dto.ts:14",{"_index":362,"title":{},"body":{"classes/EditRouteDto.html":{}}}],["route.dto.ts:16",{"_index":290,"title":{},"body":{"classes/CreateRouteDto.html":{}}}],["route.dto.ts:17",{"_index":361,"title":{},"body":{"classes/EditRouteDto.html":{}}}],["route.dto.ts:19",{"_index":289,"title":{},"body":{"classes/CreateRouteDto.html":{}}}],["route.dto.ts:20",{"_index":359,"title":{},"body":{"classes/EditRouteDto.html":{}}}],["route.dto.ts:22",{"_index":288,"title":{},"body":{"classes/CreateRouteDto.html":{}}}],["route.dto.ts:23",{"_index":360,"title":{},"body":{"classes/EditRouteDto.html":{}}}],["route.dto.ts:27",{"_index":358,"title":{},"body":{"classes/EditRouteDto.html":{}}}],["route.dto.ts:7",{"_index":292,"title":{},"body":{"classes/CreateRouteDto.html":{}}}],["route.dto.ts:8",{"_index":363,"title":{},"body":{"classes/EditRouteDto.html":{}}}],["route.end",{"_index":603,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"entities/Stop.html":{}}}],["route.endid",{"_index":727,"title":{},"body":{"injectables/RoutesService.html":{}}}],["route.id",{"_index":768,"title":{},"body":{"injectables/SearchService.html":{}}}],["route.reservations",{"_index":447,"title":{},"body":{"entities/Reservation.html":{}}}],["route.start",{"_index":602,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"entities/Stop.html":{}}}],["route.startid",{"_index":728,"title":{},"body":{"injectables/RoutesService.html":{}}}],["route_stops_stop",{"_index":775,"title":{},"body":{"injectables/SearchService.html":{}}}],["route_stops_stop.\"routeid",{"_index":776,"title":{},"body":{"injectables/SearchService.html":{}}}],["route_stops_stop.\"stopid",{"_index":778,"title":{},"body":{"injectables/SearchService.html":{}}}],["routei",{"_index":445,"title":{},"body":{"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"injectables/ReservationsService.html":{}}}],["routeid",{"_index":247,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/EditReservationDto.html":{}}}],["routerepository",{"_index":692,"title":{},"body":{"injectables/RoutesService.html":{},"injectables/SearchService.html":{}}}],["routes",{"_index":547,"title":{},"body":{"modules/ReservationsModule.html":{},"controllers/RoutesController.html":{}}}],["routes.controller",{"_index":683,"title":{},"body":{"modules/RoutesModule.html":{}}}],["routes.service",{"_index":667,"title":{},"body":{"controllers/RoutesController.html":{},"modules/RoutesModule.html":{}}}],["routes/interfaces/route.model",{"_index":474,"title":{},"body":{"entities/Reservation.html":{},"injectables/ReservationsService.html":{}}}],["routes/routes.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["routescontroller",{"_index":649,"title":{"controllers/RoutesController.html":{}},"body":{"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"coverage.html":{}}}],["routeservice",{"_index":566,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["routesmodule",{"_index":42,"title":{"modules/RoutesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["routesservice",{"_index":537,"title":{"injectables/RoutesService.html":{}},"body":{"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1128,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["rzeszów",{"_index":795,"title":{},"body":{"injectables/SearchService.html":{}}}],["scalable",{"_index":1115,"title":{},"body":{"index.html":{}}}],["search",{"_index":734,"title":{},"body":{"controllers/SearchController.html":{}}}],["search.controller",{"_index":753,"title":{},"body":{"modules/SearchModule.html":{}}}],["search.service",{"_index":741,"title":{},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{}}}],["search/search.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["searchcontroller",{"_index":732,"title":{"controllers/SearchController.html":{}},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"coverage.html":{}}}],["searchmodule",{"_index":43,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["searchservice",{"_index":740,"title":{"injectables/SearchService.html":{}},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"coverage.html":{},"overview.html":{}}}],["secret",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":766,"title":{},"body":{"injectables/SearchService.html":{},"entities/User.html":{}}}],["server",{"_index":1116,"title":{},"body":{"index.html":{}}}],["serwisu",{"_index":1017,"title":{},"body":{"modules/UsersModule.html":{}}}],["set",{"_index":633,"title":{},"body":{"entities/Route.html":{}}}],["si",{"_index":872,"title":{},"body":{"injectables/StopsService.html":{}}}],["side",{"_index":1117,"title":{},"body":{"index.html":{}}}],["sie",{"_index":611,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["signoptions",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":1146,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../reservation",{"_index":1090,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../reservation.model.ts",{"_index":1178,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../ticket.model.ts",{"_index":1179,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user",{"_index":1092,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.decorator.ts",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:42",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:48",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth",{"_index":165,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":382,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":417,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/interface/jwtpayload.interface.ts",{"_index":398,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts",{"_index":399,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts:10",{"_index":402,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:23",{"_index":404,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts",{"_index":419,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/local.strategy.ts:17",{"_index":423,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts:7",{"_index":421,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/config/constants",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["src/config/constants.ts",{"_index":1043,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/user.decorator",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/decorators/user.decorator.ts",{"_index":1045,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1046,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/reservations/dto/create",{"_index":245,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["src/reservations/dto/edit",{"_index":348,"title":{},"body":{"classes/EditReservationDto.html":{},"coverage.html":{}}}],["src/reservations/entities/reservation.entity",{"_index":645,"title":{},"body":{"entities/Route.html":{},"entities/User.html":{}}}],["src/reservations/entities/reservation.entity.ts",{"_index":436,"title":{},"body":{"entities/Reservation.html":{},"coverage.html":{}}}],["src/reservations/entities/reservation.entity.ts:13",{"_index":444,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservations/entities/reservation.entity.ts:20",{"_index":455,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservations/entities/reservation.entity.ts:26",{"_index":442,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservations/entities/reservation.entity.ts:32",{"_index":458,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservations/entities/reservation.entity.ts:36",{"_index":460,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservations/entities/reservation.entity.ts:40",{"_index":450,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservations/enums/reservation",{"_index":1094,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/reservations/interfaces/reservation.model",{"_index":646,"title":{},"body":{"entities/Route.html":{},"entities/User.html":{}}}],["src/reservations/interfaces/reservation.model.ts",{"_index":479,"title":{},"body":{"interfaces/ReservationI.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/reservations/interfaces/ticket.model.ts",{"_index":1181,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/reservations/reservations.controller.ts",{"_index":483,"title":{},"body":{"controllers/ReservationsController.html":{},"coverage.html":{}}}],["src/reservations/reservations.controller.ts:18",{"_index":491,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:24",{"_index":496,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:29",{"_index":502,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:35",{"_index":499,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:41",{"_index":494,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.controller.ts:48",{"_index":505,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/reservations/reservations.module.ts",{"_index":539,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["src/reservations/reservations.service.ts",{"_index":559,"title":{},"body":{"injectables/ReservationsService.html":{},"coverage.html":{}}}],["src/reservations/reservations.service.ts:102",{"_index":573,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:113",{"_index":577,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:125",{"_index":575,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:17",{"_index":567,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:25",{"_index":569,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:65",{"_index":570,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:70",{"_index":571,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/reservations/reservations.service.ts:85",{"_index":574,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/routes/dto/create",{"_index":280,"title":{},"body":{"classes/CreateRouteDto.html":{},"coverage.html":{}}}],["src/routes/dto/edit",{"_index":355,"title":{},"body":{"classes/EditRouteDto.html":{},"coverage.html":{}}}],["src/routes/entities/route.entity",{"_index":461,"title":{},"body":{"entities/Reservation.html":{},"modules/ReservationsModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["src/routes/entities/route.entity.ts",{"_index":630,"title":{},"body":{"entities/Route.html":{},"coverage.html":{}}}],["src/routes/entities/route.entity.ts:11",{"_index":639,"title":{},"body":{"entities/Route.html":{}}}],["src/routes/entities/route.entity.ts:17",{"_index":644,"title":{},"body":{"entities/Route.html":{}}}],["src/routes/entities/route.entity.ts:23",{"_index":638,"title":{},"body":{"entities/Route.html":{}}}],["src/routes/entities/route.entity.ts:26",{"_index":631,"title":{},"body":{"entities/Route.html":{}}}],["src/routes/entities/route.entity.ts:32",{"_index":635,"title":{},"body":{"entities/Route.html":{}}}],["src/routes/entities/route.entity.ts:38",{"_index":642,"title":{},"body":{"entities/Route.html":{}}}],["src/routes/interfaces/route.model",{"_index":313,"title":{},"body":{"classes/CreateStopDto.html":{},"interfaces/ReservationI.html":{}}}],["src/routes/interfaces/route.model.ts",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["src/routes/routes.controller.ts",{"_index":650,"title":{},"body":{"controllers/RoutesController.html":{},"coverage.html":{}}}],["src/routes/routes.controller.ts:17",{"_index":660,"title":{},"body":{"controllers/RoutesController.html":{}}}],["src/routes/routes.controller.ts:22",{"_index":657,"title":{},"body":{"controllers/RoutesController.html":{}}}],["src/routes/routes.controller.ts:27",{"_index":659,"title":{},"body":{"controllers/RoutesController.html":{}}}],["src/routes/routes.controller.ts:32",{"_index":664,"title":{},"body":{"controllers/RoutesController.html":{}}}],["src/routes/routes.controller.ts:44",{"_index":662,"title":{},"body":{"controllers/RoutesController.html":{}}}],["src/routes/routes.module",{"_index":553,"title":{},"body":{"modules/ReservationsModule.html":{},"modules/SearchModule.html":{}}}],["src/routes/routes.module.ts",{"_index":681,"title":{},"body":{"modules/RoutesModule.html":{}}}],["src/routes/routes.service",{"_index":554,"title":{},"body":{"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"modules/SearchModule.html":{}}}],["src/routes/routes.service.ts",{"_index":686,"title":{},"body":{"injectables/RoutesService.html":{},"coverage.html":{}}}],["src/routes/routes.service.ts:15",{"_index":691,"title":{},"body":{"injectables/RoutesService.html":{}}}],["src/routes/routes.service.ts:23",{"_index":696,"title":{},"body":{"injectables/RoutesService.html":{}}}],["src/routes/routes.service.ts:31",{"_index":698,"title":{},"body":{"injectables/RoutesService.html":{}}}],["src/routes/routes.service.ts:35",{"_index":693,"title":{},"body":{"injectables/RoutesService.html":{}}}],["src/routes/routes.service.ts:58",{"_index":699,"title":{},"body":{"injectables/RoutesService.html":{}}}],["src/routes/routes.service.ts:88",{"_index":695,"title":{},"body":{"injectables/RoutesService.html":{}}}],["src/search/search.controller.ts",{"_index":733,"title":{},"body":{"controllers/SearchController.html":{},"coverage.html":{}}}],["src/search/search.controller.ts:12",{"_index":737,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.module.ts",{"_index":752,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/search/search.service.ts",{"_index":755,"title":{},"body":{"injectables/SearchService.html":{},"coverage.html":{}}}],["src/search/search.service.ts:17",{"_index":759,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:9",{"_index":757,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/stops/dto/create",{"_index":303,"title":{},"body":{"classes/CreateStopDto.html":{},"coverage.html":{}}}],["src/stops/dto/edit",{"_index":366,"title":{},"body":{"classes/EditStopDto.html":{},"coverage.html":{}}}],["src/stops/entities/stop.entity",{"_index":557,"title":{},"body":{"modules/ReservationsModule.html":{},"entities/Route.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{}}}],["src/stops/entities/stop.entity.ts",{"_index":808,"title":{},"body":{"entities/Stop.html":{},"coverage.html":{}}}],["src/stops/entities/stop.entity.ts:13",{"_index":818,"title":{},"body":{"entities/Stop.html":{}}}],["src/stops/entities/stop.entity.ts:18",{"_index":815,"title":{},"body":{"entities/Stop.html":{}}}],["src/stops/entities/stop.entity.ts:23",{"_index":816,"title":{},"body":{"entities/Stop.html":{}}}],["src/stops/entities/stop.entity.ts:28",{"_index":811,"title":{},"body":{"entities/Stop.html":{}}}],["src/stops/entities/stop.entity.ts:33",{"_index":813,"title":{},"body":{"entities/Stop.html":{}}}],["src/stops/entities/stop.entity.ts:8",{"_index":812,"title":{},"body":{"entities/Stop.html":{}}}],["src/stops/interfaces/stop",{"_index":823,"title":{},"body":{"interfaces/StopResponse.html":{},"coverage.html":{}}}],["src/stops/interfaces/stop.model",{"_index":262,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{}}}],["src/stops/interfaces/stop.model.ts",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["src/stops/stops.controller.ts",{"_index":827,"title":{},"body":{"controllers/StopsController.html":{},"coverage.html":{}}}],["src/stops/stops.controller.ts:14",{"_index":836,"title":{},"body":{"controllers/StopsController.html":{}}}],["src/stops/stops.controller.ts:19",{"_index":837,"title":{},"body":{"controllers/StopsController.html":{}}}],["src/stops/stops.controller.ts:24",{"_index":834,"title":{},"body":{"controllers/StopsController.html":{}}}],["src/stops/stops.controller.ts:29",{"_index":841,"title":{},"body":{"controllers/StopsController.html":{}}}],["src/stops/stops.controller.ts:36",{"_index":839,"title":{},"body":{"controllers/StopsController.html":{}}}],["src/stops/stops.module",{"_index":556,"title":{},"body":{"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{}}}],["src/stops/stops.module.ts",{"_index":853,"title":{},"body":{"modules/StopsModule.html":{}}}],["src/stops/stops.service",{"_index":555,"title":{},"body":{"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"modules/SearchModule.html":{}}}],["src/stops/stops.service.ts",{"_index":856,"title":{},"body":{"injectables/StopsService.html":{},"coverage.html":{}}}],["src/stops/stops.service.ts:10",{"_index":860,"title":{},"body":{"injectables/StopsService.html":{}}}],["src/stops/stops.service.ts:16",{"_index":867,"title":{},"body":{"injectables/StopsService.html":{}}}],["src/stops/stops.service.ts:30",{"_index":866,"title":{},"body":{"injectables/StopsService.html":{}}}],["src/stops/stops.service.ts:36",{"_index":861,"title":{},"body":{"injectables/StopsService.html":{}}}],["src/stops/stops.service.ts:59",{"_index":865,"title":{},"body":{"injectables/StopsService.html":{}}}],["src/stops/stops.service.ts:79",{"_index":863,"title":{},"body":{"injectables/StopsService.html":{}}}],["src/users/dto/create",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/edit",{"_index":372,"title":{},"body":{"classes/EditUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"injectables/RoutesService.html":{},"modules/SearchModule.html":{}}}],["src/users/entities/user.entity.ts",{"_index":894,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:12",{"_index":903,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":899,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":910,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:30",{"_index":902,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":908,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":897,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":905,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:56",{"_index":914,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:62",{"_index":898,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:68",{"_index":916,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:71",{"_index":913,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:74",{"_index":915,"title":{},"body":{"entities/User.html":{}}}],["src/users/enums/user",{"_index":1103,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/interfaces/login.interface.ts",{"_index":433,"title":{},"body":{"interfaces/LoginInterface.html":{},"coverage.html":{}}}],["src/users/interfaces/user.interface",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/EditRouteDto.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["src/users/interfaces/user.interface.ts",{"_index":973,"title":{},"body":{"interfaces/UserI.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":975,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:28",{"_index":985,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":993,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":990,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:51",{"_index":992,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":998,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":996,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{}}}],["src/users/users.module.ts",{"_index":1013,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{}}}],["src/users/users.service.ts",{"_index":928,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:109",{"_index":1024,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:113",{"_index":1029,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:124",{"_index":1026,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:17",{"_index":1022,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":1023,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":1027,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:49",{"_index":1025,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:57",{"_index":1028,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:71",{"_index":1031,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:85",{"_index":1032,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":286,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{},"entities/Route.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"index.html":{}}}],["start','end",{"_index":705,"title":{},"body":{"injectables/RoutesService.html":{}}}],["start:dev",{"_index":1131,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1133,"title":{},"body":{"index.html":{}}}],["started",{"_index":1109,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1121,"title":{},"body":{"index.html":{}}}],["startid",{"_index":287,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{}}}],["startowy",{"_index":297,"title":{},"body":{"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{}}}],["statements",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":248,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/EditReservationDto.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"injectables/ReservationsService.html":{}}}],["status.enum",{"_index":264,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{}}}],["status.enum.ts",{"_index":1091,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1155,"title":{},"body":{"index.html":{}}}],["stop",{"_index":261,"title":{"entities/Stop.html":{}},"body":{"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/EditRouteDto.html":{},"modules/ReservationsModule.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"coverage.html":{}}}],["stop.dto",{"_index":370,"title":{},"body":{"classes/EditStopDto.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{}}}],["stop.dto.ts",{"_index":304,"title":{},"body":{"classes/CreateStopDto.html":{},"classes/EditStopDto.html":{},"coverage.html":{}}}],["stop.dto.ts:13",{"_index":308,"title":{},"body":{"classes/CreateStopDto.html":{}}}],["stop.dto.ts:17",{"_index":310,"title":{},"body":{"classes/CreateStopDto.html":{}}}],["stop.dto.ts:9",{"_index":311,"title":{},"body":{"classes/CreateStopDto.html":{}}}],["stop.firststop",{"_index":643,"title":{},"body":{"entities/Route.html":{}}}],["stop.id",{"_index":777,"title":{},"body":{"injectables/SearchService.html":{}}}],["stop.laststop",{"_index":636,"title":{},"body":{"entities/Route.html":{}}}],["stop.model",{"_index":825,"title":{},"body":{"interfaces/StopResponse.html":{}}}],["stop.name",{"_index":770,"title":{},"body":{"injectables/SearchService.html":{},"injectables/StopsService.html":{}}}],["stopexist",{"_index":874,"title":{},"body":{"injectables/StopsService.html":{}}}],["stopi",{"_index":701,"title":{},"body":{"injectables/RoutesService.html":{}}}],["stoprepository",{"_index":756,"title":{},"body":{"injectables/SearchService.html":{},"injectables/StopsService.html":{}}}],["stopresponse",{"_index":822,"title":{"interfaces/StopResponse.html":{}},"body":{"interfaces/StopResponse.html":{},"injectables/StopsService.html":{},"coverage.html":{}}}],["stops",{"_index":783,"title":{},"body":{"injectables/SearchService.html":{},"controllers/StopsController.html":{}}}],["stops.controller",{"_index":854,"title":{},"body":{"modules/StopsModule.html":{}}}],["stops.service",{"_index":842,"title":{},"body":{"controllers/StopsController.html":{},"modules/StopsModule.html":{}}}],["stops/stops.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["stopscontroller",{"_index":826,"title":{"controllers/StopsController.html":{}},"body":{"controllers/StopsController.html":{},"modules/StopsModule.html":{},"coverage.html":{}}}],["stopsmodule",{"_index":44,"title":{"modules/StopsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules.html":{},"overview.html":{}}}],["stopsservice",{"_index":538,"title":{"injectables/StopsService.html":{}},"body":{"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"modules/SearchModule.html":{},"controllers/StopsController.html":{},"modules/StopsModule.html":{},"injectables/StopsService.html":{},"coverage.html":{},"overview.html":{}}}],["strategy",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stworzona",{"_index":597,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["stworzonna",{"_index":718,"title":{},"body":{"injectables/RoutesService.html":{}}}],["stworzony",{"_index":888,"title":{},"body":{"injectables/StopsService.html":{},"controllers/UsersController.html":{}}}],["sub",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["success",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["super",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1147,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1166,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":1058,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1057,"title":{},"body":{"coverage.html":{}}}],["tablice",{"_index":945,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["takiej",{"_index":877,"title":{},"body":{"injectables/StopsService.html":{}}}],["temp",{"_index":771,"title":{},"body":{"injectables/SearchService.html":{}}}],["temp_table1",{"_index":772,"title":{},"body":{"injectables/SearchService.html":{}}}],["tempdata",{"_index":764,"title":{},"body":{"injectables/SearchService.html":{}}}],["tempdata1",{"_index":781,"title":{},"body":{"injectables/SearchService.html":{}}}],["test",{"_index":1136,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1139,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1138,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1135,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1145,"title":{},"body":{"index.html":{}}}],["then(u",{"_index":964,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(dto",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(user",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":427,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.email",{"_index":925,"title":{},"body":{"entities/User.html":{}}}],["this.email.tolowercase",{"_index":926,"title":{},"body":{"entities/User.html":{}}}],["this.jwtservice.sign(payload",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":922,"title":{},"body":{"entities/User.html":{}}}],["this.reservationrepository.create(dto",{"_index":599,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.find",{"_index":600,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.find({relations",{"_index":607,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.findone",{"_index":613,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.remove(reservation",{"_index":626,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.save(editedreservation",{"_index":625,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.save(newreservation",{"_index":591,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationservice.createreservation(dto",{"_index":522,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.getallreservations",{"_index":524,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.getonereservation(id",{"_index":531,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.getuserticket(id",{"_index":526,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.removereservation(id",{"_index":533,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationservice.updatereservation(id",{"_index":532,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.routerepository.find",{"_index":704,"title":{},"body":{"injectables/RoutesService.html":{}}}],["this.routerepository.find({relations",{"_index":790,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.routerepository.findbyids(tempdata1",{"_index":782,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.routerepository.findone",{"_index":706,"title":{},"body":{"injectables/RoutesService.html":{}}}],["this.routerepository.findone({arrival_date",{"_index":788,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.routerepository.save(newroute",{"_index":716,"title":{},"body":{"injectables/RoutesService.html":{}}}],["this.routerepository.update(id",{"_index":730,"title":{},"body":{"injectables/RoutesService.html":{}}}],["this.routeservice.getroute(dto.routeid",{"_index":594,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.routesservice.createroute(dto",{"_index":672,"title":{},"body":{"controllers/RoutesController.html":{}}}],["this.routesservice.deleteone(id",{"_index":677,"title":{},"body":{"controllers/RoutesController.html":{}}}],["this.routesservice.getallroutes",{"_index":670,"title":{},"body":{"controllers/RoutesController.html":{}}}],["this.routesservice.getroute(id",{"_index":673,"title":{},"body":{"controllers/RoutesController.html":{}}}],["this.routesservice.updateone(id",{"_index":674,"title":{},"body":{"controllers/RoutesController.html":{}}}],["this.searchservice.filterroute(from",{"_index":748,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.stoprepository.delete(id",{"_index":892,"title":{},"body":{"injectables/StopsService.html":{}}}],["this.stoprepository.find",{"_index":870,"title":{},"body":{"injectables/StopsService.html":{}}}],["this.stoprepository.findone",{"_index":786,"title":{},"body":{"injectables/SearchService.html":{},"injectables/StopsService.html":{}}}],["this.stoprepository.save(newstop",{"_index":887,"title":{},"body":{"injectables/StopsService.html":{}}}],["this.stoprepository.update(id",{"_index":890,"title":{},"body":{"injectables/StopsService.html":{}}}],["this.stopsservice.createstop(dto",{"_index":847,"title":{},"body":{"controllers/StopsController.html":{}}}],["this.stopsservice.deletestop(id",{"_index":850,"title":{},"body":{"controllers/StopsController.html":{}}}],["this.stopsservice.editstop(id",{"_index":848,"title":{},"body":{"controllers/StopsController.html":{}}}],["this.stopsservice.getstop(dto.endid",{"_index":711,"title":{},"body":{"injectables/RoutesService.html":{}}}],["this.stopsservice.getstop(dto.startid",{"_index":710,"title":{},"body":{"injectables/RoutesService.html":{}}}],["this.stopsservice.getstop(id",{"_index":844,"title":{},"body":{"controllers/StopsController.html":{}}}],["this.stopsservice.getstop(route.endid",{"_index":725,"title":{},"body":{"injectables/RoutesService.html":{}}}],["this.stopsservice.getstop(route.startid",{"_index":723,"title":{},"body":{"injectables/RoutesService.html":{}}}],["this.stopsservice.getstops",{"_index":845,"title":{},"body":{"controllers/StopsController.html":{}}}],["this.userrepository",{"_index":962,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.create(dto",{"_index":941,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":949,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":935,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findone(id",{"_index":960,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":942,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.update(id",{"_index":958,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["this.userservice.findone",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone(email",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone({email",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getone(id",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/ReservationsService.html":{}}}],["this.userservice.getoneuser(dto.userid",{"_index":592,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.userservice.getoneuser(userid",{"_index":598,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.usersservice.createone(dto",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.deleteone(id",{"_index":1009,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finddriver",{"_index":1005,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers",{"_index":1004,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getdriver(dto.driverid",{"_index":712,"title":{},"body":{"injectables/RoutesService.html":{}}}],["this.usersservice.getdriver(route.driverid",{"_index":720,"title":{},"body":{"injectables/RoutesService.html":{}}}],["this.usersservice.getoneuser(id",{"_index":1007,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateone(id",{"_index":1008,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":391,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ReservationsService.html":{},"injectables/StopsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["ticket",{"_index":606,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["timestamp",{"_index":441,"title":{},"body":{"entities/Reservation.html":{},"injectables/SearchService.html":{},"entities/User.html":{}}}],["todata",{"_index":787,"title":{},"body":{"injectables/SearchService.html":{}}}],["touch",{"_index":1156,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":1069,"title":{},"body":{"dependencies.html":{}}}],["trasa",{"_index":717,"title":{},"body":{"injectables/RoutesService.html":{}}}],["trasy",{"_index":546,"title":{},"body":{"modules/ReservationsModule.html":{},"injectables/SearchService.html":{}}}],["trasy.arrival_date",{"_index":800,"title":{},"body":{"injectables/SearchService.html":{}}}],["trasy.id",{"_index":798,"title":{},"body":{"injectables/SearchService.html":{}}}],["true",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Stop.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1162,"title":{},"body":{"index.html":{}}}],["type",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginInterface.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"interfaces/StopResponse.html":{},"controllers/StopsController.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1176,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":471,"title":{},"body":{"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"modules/RoutesModule.html":{},"injectables/RoutesService.html":{},"injectables/SearchService.html":{},"entities/Stop.html":{},"injectables/StopsService.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([reservation",{"_index":558,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["typeormmodule.forfeature([route",{"_index":684,"title":{},"body":{"modules/RoutesModule.html":{},"modules/SearchModule.html":{}}}],["typeormmodule.forfeature([stop",{"_index":685,"title":{},"body":{"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":754,"title":{},"body":{"modules/SearchModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":1120,"title":{},"body":{"index.html":{}}}],["u",{"_index":965,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["u.id",{"_index":967,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["udało",{"_index":610,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/StopsService.html":{}}}],["ukasz",{"_index":1174,"title":{},"body":{"properties.html":{}}}],["unauthorizedexception",{"_index":389,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('autoryzacja",{"_index":393,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception('błedne",{"_index":429,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":454,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["unikalna",{"_index":542,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["unique",{"_index":820,"title":{},"body":{"entities/Stop.html":{},"entities/User.html":{}}}],["unit",{"_index":1134,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ReservationsService.html":{},"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/SearchController.html":{},"injectables/StopsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1173,"title":{},"body":{"properties.html":{}}}],["updated_at",{"_index":457,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["updatedat",{"_index":438,"title":{},"body":{"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"entities/User.html":{},"interfaces/UserI.html":{}}}],["updatedatecolumn",{"_index":470,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":456,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["updateone",{"_index":655,"title":{},"body":{"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateone(id",{"_index":663,"title":{},"body":{"controllers/RoutesController.html":{},"injectables/RoutesService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatereservation",{"_index":563,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["updatereservation(id",{"_index":576,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["updateroute",{"_index":729,"title":{},"body":{"injectables/RoutesService.html":{}}}],["updatestop",{"_index":832,"title":{},"body":{"controllers/StopsController.html":{}}}],["updatestop(id",{"_index":840,"title":{},"body":{"controllers/StopsController.html":{}}}],["updateuser",{"_index":957,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["used",{"_index":1101,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["usefactory",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":523,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":112,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Route.html":{},"injectables/RoutesService.html":{},"modules/SearchModule.html":{},"entities/User.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EditUserDto.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:20",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:39",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["user.reservations",{"_index":459,"title":{},"body":{"entities/Reservation.html":{}}}],["user[data",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userentity",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["userentity.id",{"_index":966,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["userexist",{"_index":934,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["userfindone",{"_index":927,"title":{"interfaces/UserFindOne.html":{}},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["useri",{"_index":228,"title":{"interfaces/UserI.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"classes/EditRouteDto.html":{},"entities/Reservation.html":{},"interfaces/ReservationI.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"interfaces/UserFindOne.html":{},"interfaces/UserI.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":249,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/EditReservationDto.html":{},"injectables/ReservationsService.html":{}}}],["username",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["usernamefield",{"_index":425,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":932,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"entities/User.html":{},"interfaces/UserI.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":920,"title":{},"body":{"entities/User.html":{}}}],["users",{"_index":976,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1018,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1001,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":974,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ReservationsService.html":{}}}],["usersmodule",{"_index":45,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":135,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ReservationsService.html":{},"injectables/RoutesService.html":{},"interfaces/UserFindOne.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usunięta",{"_index":629,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["usunięto",{"_index":893,"title":{},"body":{"injectables/StopsService.html":{}}}],["utility",{"_index":978,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["użytkownik",{"_index":675,"title":{},"body":{"controllers/RoutesController.html":{},"controllers/UsersController.html":{}}}],["użytkownikami",{"_index":1016,"title":{},"body":{"modules/UsersModule.html":{}}}],["użytkowników",{"_index":947,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["validate",{"_index":401,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":422,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":403,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationerror",{"_index":1000,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":175,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/AuthRegisterDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRouteDto.html":{},"classes/CreateStopDto.html":{},"classes/CreateUserDto.html":{},"classes/EditReservationDto.html":{},"classes/EditRouteDto.html":{},"classes/EditStopDto.html":{},"classes/EditUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["value",{"_index":1095,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":901,"title":{},"body":{"entities/User.html":{}}}],["variable",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1182,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":529,"title":{},"body":{"controllers/ReservationsController.html":{},"properties.html":{}}}],["void",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["watch",{"_index":1129,"title":{},"body":{"index.html":{}}}],["website",{"_index":1160,"title":{},"body":{"index.html":{}}}],["where(data",{"_index":971,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["world",{"_index":102,"title":{},"body":{"injectables/AppService.html":{}}}],["wszystkich",{"_index":946,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["wszystkimi",{"_index":1015,"title":{},"body":{"modules/UsersModule.html":{}}}],["yes",{"_index":1030,"title":{},"body":{"injectables/UsersService.html":{}}}],["you'd",{"_index":1150,"title":{},"body":{"index.html":{}}}],["za",{"_index":274,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["zaktualizowano",{"_index":891,"title":{},"body":{"injectables/StopsService.html":{}}}],["zalogowano",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["zamknięta",{"_index":278,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["ze",{"_index":1014,"title":{},"body":{"modules/UsersModule.html":{}}}],["znaleziono",{"_index":615,"title":{},"body":{"injectables/ReservationsService.html":{},"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}],["zoom",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ReservationsModule.html":{},"modules/RoutesModule.html":{},"modules/SearchModule.html":{},"modules/StopsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["została",{"_index":628,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["zrealizowana",{"_index":277,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["zwracająca",{"_index":944,"title":{},"body":{"interfaces/UserFindOne.html":{},"injectables/UsersService.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nAppModule -->\n\nReservationsModule->AppModule\n\n\n\n\n\nRoutesModule\n\nRoutesModule\n\nAppModule -->\n\nRoutesModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nStopsModule\n\nStopsModule\n\nAppModule -->\n\nStopsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ReservationsModule\n                        \n                        \n                            RoutesModule\n                        \n                        \n                            SearchModule\n                        \n                        \n                            StopsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { ReservationsModule } from './reservations/reservations.module';\nimport { RoutesModule } from './routes/routes.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { DATABASE_HOST, DATABASE_NAME, DATABASE_PASSWORD, DATABASE_PORT, DATABASE_USERNAME } from './config/constants';\nimport { StopsModule } from './stops/stops.module';\nimport { SearchModule } from './search/search.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: '.env'\n    }),\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        type: 'postgres',\n        host: config.get(DATABASE_HOST),\n        port: parseInt(config.get(DATABASE_PORT), 10),\n        username: config.get(DATABASE_USERNAME),\n        password: config.get(DATABASE_PASSWORD),\n        database: config.get(DATABASE_NAME),\n        entities: [__dirname + './**/**/*entity{.ts,.js}'],\n        autoLoadEntities: true,\n        synchronize: true,\n        logging: true,\n      })\n    }),\n    AuthModule, UsersModule, ReservationsModule, RoutesModule, StopsModule, SearchModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: AuthLoginDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            AuthLoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Inject, Post, UseGuards } from '@nestjs/common';\nimport { async } from 'rxjs';\nimport { User } from 'src/decorators/user.decorator';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { User as UserEntity } from 'src/users/entities/user.entity';\nimport { UsersService } from 'src/users/users.service';\nimport { AuthService } from './auth.service';\nimport { AuthLoginDto } from './dto/auth-login.dto';\nimport { LocalAuthGuard } from './guards/local-auth-guard';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(\n        @Inject(AuthService) private authService: AuthService,\n        @Inject(UsersService) private usersService: UsersService\n    ) {}\n\n    @UseGuards(LocalAuthGuard)\n    @Post('login')\n    async login(@Body() loginDto: AuthLoginDto, @User() user: UserEntity) {\n      const data = await this.authService.login(user);\n      return {\n        success: true,\n        message: \"Zalogowano pomyślnie\",\n        data\n      };\n    }\n\n    /*@Post('login')\n    async login(@Body() dto: AuthLoginDto, @User() user: UserEntity): Promise {\n        const data = await this.authService.login(dto);\n        return {\n            success: true,\n            message: \"Zalogowano pomyślnie\",\n            data,\n            user\n        }\n    }*/\n\n    @Post('register')\n    register(@Body() dto: CreateUserDto) {\n        this.usersService.createOne(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthLoginDto.html":{"url":"classes/AuthLoginDto.html","title":"class - AuthLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-login.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-login.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString } from \"class-validator\";\nimport {ApiProperty} from \"@nestjs/swagger\";\n\nexport class AuthLoginDto {\n\n    @ApiProperty()\n    @IsString()\n    @IsEmail()\n    email: string;\n\n    @ApiProperty()\n    @IsString()\n    password: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JWT_SECRET } from 'src/config/constants';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport { LocalStrategy } from './strategy/local.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        secret: config.get(JWT_SECRET),\n        signOptions: { expiresIn: '60m' },\n      }),\n    }),\n    UsersModule],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthRegisterDto.html":{"url":"classes/AuthRegisterDto.html","title":"class - AuthRegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthRegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-register.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthLoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                fistName\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fistName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-register.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-register.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsEmail()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AuthLoginDto\n\n                            \n                        \n                    \n                        \n                                Defined in         AuthLoginDto:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AuthLoginDto\n\n                            \n                        \n                    \n                        \n                                Defined in         AuthLoginDto:13\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString } from \"class-validator\";\nimport { AuthLoginDto } from \"./auth-login.dto\";\n\nexport class AuthRegisterDto extends AuthLoginDto {\n\n    @IsEmail()\n    @IsString()\n    fistName: string;\n\n    @IsString()\n    lastName: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { user: User; accessToken: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compare } from 'bcryptjs';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { User } from 'src/users/entities/user.entity';\nimport { UserI } from 'src/users/interfaces/user.interface';\nimport { UsersService } from 'src/users/users.service';\nimport { AuthLoginDto } from './dto/auth-login.dto';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(\n        @Inject(UsersService) private userService: UsersService,\n        @Inject(JwtService) private jwtService: JwtService\n    ) {}\n\n    /*async login(dto: AuthLoginDto): Promise {\n\n        const user = await this.userService.findOne({email});\n\n        const accessToken = this.jwtService.sign(payload)\n\n        return {\n            success: true,\n            message: \"Zalogowano pomyślnie\",\n            user,\n            accessToken\n        }\n    }*/\n\n    login(user: User) {\n        const { id, ...rest } = user;\n        const payload = { email: user.email, sub: id }\n        //const payload = { sub: id };\n\n        return {\n          user,\n          accessToken: this.jwtService.sign(payload),\n        };\n      }\n\n    async register(dto: CreateUserDto): Promise {\n\n\n    }\n\n    async validateUser(email: string, password: string): Promise {\n        const user = await this.userService.findOne({ email });\n\n        if (user && (await compare(password, user.password))) {\n          const { password, ...rest } = user;\n\n          return rest;\n\n        }\n\n        return null;\n\n      }\n\n    /*async validateUser(email: string, password: string): Promise {\n        const user = await this.userService.findOne(email);\n\n        if (user && (await compare(password, user.password))) {\n            const { password, ...rest } = user;\n            return rest;\n        }\n\n        return null;\n    }*/\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/dto/create-reservation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                routeId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        routeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReservationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(ReservationStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/reservations/dto/create-reservation.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsEnum, IsNotEmpty, IsNumber, IsOptional, IsString } from \"class-validator\";\nimport { Stop } from \"src/stops/interfaces/stop.model\";\nimport { UserI } from \"src/users/interfaces/user.interface\";\nimport { ReservationStatus } from \"../enums/reservation-status.enum\";\n\nexport class CreateReservationDto {\n\n    //@IsNumber()\n    //@IsNotEmpty()\n    userId: number;\n\n    //@IsDateString()\n    //reservationDate: Date;\n\n    @IsOptional()\n    @IsEnum(ReservationStatus)\n    status: ReservationStatus;\n\n    @IsOptional()\n    routeId: number;\n}\n\n\n\n// status rezerwacji\n\n/*\n    NOWA\n    POTWIERDZONA\n    ANULOWANA\n    ODRZUCONA // np za malo miejsc\n    ZREALIZOWANA\n    ZAMKNIĘTA\n*/\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRouteDto.html":{"url":"classes/CreateRouteDto.html","title":"class - CreateRouteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRouteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/dto/create-route.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                arrival_date\n                            \n                            \n                                    \n                                driverId\n                            \n                            \n                                    \n                                end\n                            \n                            \n                                    \n                                endId\n                            \n                            \n                                    \n                                start\n                            \n                            \n                                    \n                                startId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrival_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/create-route.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        driverId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/create-route.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Stop\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/create-route.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/create-route.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Stop\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/create-route.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/create-route.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsDateString, IsNumber, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { Stop } from \"src/stops/interfaces/stop.model\";\n\nexport class CreateRouteDto {\n\n    @IsOptional()\n    start: Stop; //punkt startowy numer przystanku\n\n    @IsNumber()\n    startId: number;\n\n    @IsNumber()\n    endId: number;\n\n    @IsOptional()\n    end: Stop; // PUNKT DOCELOWY numer przystanku\n\n    @IsNumber()\n    driverId: number;\n\n    @IsDateString()\n    arrival_date: Date; // Data podróży\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateStopDto.html":{"url":"classes/CreateStopDto.html","title":"class - CreateStopDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateStopDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stops/dto/create-stop.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                lat\n                            \n                            \n                                    \n                                    \n                                lng\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stops/dto/create-stop.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stops/dto/create-stop.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stops/dto/create-stop.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNumber, IsOptional, IsString } from \"class-validator\";\nimport { Route } from \"src/routes/interfaces/route.model\";\n\nexport class CreateStopDto {\n\n    //id: number;\n\n    @IsString()\n    name: string;\n\n    @IsNumber()\n    @IsOptional()\n    lat: number | null;\n\n    @IsOptional()\n    @IsNumber()\n    lng: number | null;\n\n    //@IsOptional()\n    //route: Route | null;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                isEmployee\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        isEmployee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@Length(6, 20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsEnum(UserRole)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsDate, IsDateString, IsEmail, IsEnum, IsLowercase, IsOptional, IsString, Length, MaxLength } from \"class-validator\";\nimport { UserRole } from \"../enums/user-role.enum\";\nimport {ApiProperty, ApiPropertyOptional} from \"@nestjs/swagger\";\n\nexport class CreateUserDto {\n\n    @ApiProperty()\n    @IsString()\n    @IsEmail()\n    email: string;\n\n    @ApiProperty()\n    @IsString()\n    @Length(6, 20)\n    password: string;\n\n    @ApiProperty()\n    @IsString()\n    @MaxLength(20)\n    firstName: string;\n\n    @ApiProperty()\n    @IsString()\n    @MaxLength(30)\n    lastName: string;\n\n    @ApiProperty()\n    @IsDateString()\n    birthDate: Date;\n\n    @ApiPropertyOptional()\n    @IsBoolean()\n    @IsOptional()\n    isEmployee: boolean;\n\n    @ApiPropertyOptional()\n    @IsEnum(UserRole)\n    @IsOptional()\n    role: UserRole;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditReservationDto.html":{"url":"classes/EditReservationDto.html","title":"class - EditReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/dto/edit-reservation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CreateReservationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                routeId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        routeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateReservationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateReservationDto:20\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReservationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(ReservationStatus)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateReservationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateReservationDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         CreateReservationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateReservationDto:10\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional } from \"class-validator\";\nimport { CreateReservationDto } from \"./create-reservation.dto\";\n\nexport class EditReservationDto extends CreateReservationDto {\n\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditRouteDto.html":{"url":"classes/EditRouteDto.html","title":"class - EditRouteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditRouteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/dto/edit-route.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                arrival_date\n                            \n                            \n                                    \n                                driver\n                            \n                            \n                                    \n                                driverId\n                            \n                            \n                                    \n                                end\n                            \n                            \n                                    \n                                endId\n                            \n                            \n                                    \n                                start\n                            \n                            \n                                    \n                                startId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        arrival_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/edit-route.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        driver\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserI\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/edit-route.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        driverId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/edit-route.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Stop\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/edit-route.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/edit-route.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Stop\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/edit-route.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/dto/edit-route.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsDateString, IsNumber, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { Stop } from \"src/stops/interfaces/stop.model\";\nimport { UserI } from \"src/users/interfaces/user.interface\";\n\nexport class EditRouteDto {\n\n    @IsOptional()\n    start: Stop; //punkt startowy numer przystanku\n\n    @IsOptional()\n    startId: number;\n\n    @IsOptional()\n    endId: number;\n\n    @IsOptional()\n    end: Stop; // PUNKT DOCELOWY numer przystanku\n\n    @IsOptional()\n    driver: UserI;\n\n    @IsOptional()\n    driverId: number;\n\n    @IsDateString()\n    @IsOptional()\n    arrival_date: Date; // Data podróży\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditStopDto.html":{"url":"classes/EditStopDto.html","title":"class - EditStopDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditStopDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stops/dto/edit-stop.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CreateStopDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                lat\n                            \n                            \n                                    \n                                    \n                                lng\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateStopDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateStopDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateStopDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateStopDto:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateStopDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateStopDto:17\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional } from \"class-validator\";\nimport { CreateStopDto } from \"./create-stop.dto\";\n\nexport class EditStopDto extends CreateStopDto {\n\n    //id: number;\n    @IsOptional()\n    name: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditUserDto.html":{"url":"classes/EditUserDto.html","title":"class - EditUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/edit-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CreateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                isEmployee\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateUserDto:26\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateUserDto:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateUserDto:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isEmployee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateUserDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateUserDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateUserDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateUserDto:34\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsDate, IsEmail, IsEnum, IsLowercase, IsOptional, IsString, Length, MaxLength } from \"class-validator\";\nimport { UserRole } from \"../enums/user-role.enum\";\nimport { CreateUserDto } from \"./create-user.dto\";\nimport {ApiPropertyOptional} from \"@nestjs/swagger\";\n\nexport class EditUserDto extends CreateUserDto{\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    email: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    password: string | null;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    firstName: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    lastName: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    birthDate: Date;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    isEmployee: boolean;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    role: UserRole;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth-guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth-guard.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  handleRequest(err, user, info) {\n\n    if (err || !user) {\n      throw err || new UnauthorizedException('Autoryzacja nieudana');\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/JwtPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n    id: number,\n    email: string,\n    sub: number\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/jwt.strategy.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { JWT_SECRET } from \"src/config/constants\";\nimport { UsersService } from \"src/users/users.service\";\nimport { JwtPayload } from \"../interface/JwtPayload.interface\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\n    constructor(\n        private userService: UsersService,\n        private config: ConfigService\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: config.get(JWT_SECRET),\n        });\n    }\n\n    async validate(payload: JwtPayload) {\n        const { email: email, sub: id } = payload;\n        return await this.userService.getOne(id);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth-guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/local.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Strategy } from \"passport-local\";\nimport { AuthService } from \"../auth.service\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        private readonly authService: AuthService\n    ) {\n        super({\n            usernameField: 'email',\n            passwordField: 'password'\n        });\n    }\n\n    async validate(email: string, password: string) {\n        const user = await this.authService.validateUser(email, password);\n        if(!user) throw new UnauthorizedException('Błedne dane logowania');\n        return user;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginInterface.html":{"url":"interfaces/LoginInterface.html","title":"interface - LoginInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/login.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginInterface {\n    email?: string,\n    password?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Reservation.html":{"url":"entities/Reservation.html","title":"entity - Reservation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Reservation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/entities/reservation.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                route\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/entities/reservation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/entities/reservation.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RouteI\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, route => route.reservations, {onDelete: 'CASCADE'})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/entities/reservation.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReservationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ReservationStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/entities/reservation.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/entities/reservation.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserI\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reservations, {onDelete: 'CASCADE'})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservations/entities/reservation.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Route } from \"src/routes/entities/route.entity\";\nimport { User } from \"src/users/entities/user.entity\";\nimport { UserI } from \"src/users/interfaces/user.interface\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, JoinTable, ManyToOne, OneToMany, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ReservationStatus } from \"../enums/reservation-status.enum\";\nimport { ReservationI } from \"../interfaces/reservation.model\";\nimport { Route as RouteI } from \"../../routes/interfaces/route.model\";\n\n@Entity('reservation')\nexport class Reservation{\n\n    @PrimaryGeneratedColumn(\"uuid\")\n    id: string;\n\n    @Column({\n        type: \"enum\",\n        enum: ReservationStatus,\n        default: ReservationStatus.NEW\n    })\n    status: ReservationStatus;\n\n    @CreateDateColumn({\n        name: \"created_at\",\n        type: \"timestamp\"\n    })\n    createdAt: Date;\n\n    @UpdateDateColumn({\n        name: \"updated_at\",\n        type: \"timestamp\"\n    })\n    updatedAt: Date;\n\n    @ManyToOne(()=> User, user => user.reservations, { onDelete: \"CASCADE\"})\n    @JoinTable()\n    user: UserI;\n\n    @ManyToOne(() => Route, route => route.reservations, { onDelete: 'CASCADE'})\n    @JoinTable()\n    route: RouteI;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReservationI.html":{"url":"interfaces/ReservationI.html","title":"interface - ReservationI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ReservationI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/interfaces/reservation.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            route\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            updatedAt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:         RouteI\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RouteI\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         ReservationStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReservationStatus\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserI\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserI\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Route as RouteI } from \"src/routes/interfaces/route.model\";\nimport { UserI } from \"src/users/interfaces/user.interface\";\nimport { ReservationStatus } from \"../enums/reservation-status.enum\";\n\nexport type GetReservationsResponse = {\n    message: string;\n    } | {\n    message: string;\n    reservations: ReservationI[];\n}\n\nexport interface ReservationI {\n    id?: string;\n    status?: ReservationStatus;\n    createdAt?: Date;\n    updatedAt?: Date;\n    user?: UserI;\n    route?: RouteI;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReservationsController.html":{"url":"controllers/ReservationsController.html","title":"controller - ReservationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReservationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/reservations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reservations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createReservation\n                            \n                            \n                                    \n                                editOne\n                            \n                            \n                                    \n                                    \n                                getAll\n                            \n                            \n                                    \n                                getOne\n                            \n                            \n                                    \n                                getUserTicket\n                            \n                            \n                                    \n                                removeReservation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservation(dto: CreateReservationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        editOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    editOne(id: string, dto: EditReservationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            EditReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getUserTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserTicket(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('tickets/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeReservation(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/reservations/reservations.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpStatus, Inject, Param, ParseIntPipe, ParseUUIDPipe, Patch, Post, Put, UseGuards } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth-guard';\nimport { UserI } from 'src/users/interfaces/user.interface';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\nimport { EditReservationDto } from './dto/edit-reservation.dto';\nimport { GetReservationsResponse, ReservationI } from './interfaces/reservation.model';\nimport { ReservationsService } from './reservations.service';\n\n@Controller('reservations')\nexport class ReservationsController {\n\n    constructor(\n        @Inject(ReservationsService) private reservationService: ReservationsService\n    ) {}\n\n    @Post()\n    createReservation(@Body() dto: CreateReservationDto): Promise {\n        return this.reservationService.createReservation(dto);\n    }\n\n    @Get()\n    @UseGuards(JwtAuthGuard)\n    getAll(): Promise {\n        return this.reservationService.getAllReservations();\n    }\n\n    @Get('tickets/:id')\n    getUserTicket(\n        @Param('id') id: number) {\n        return this.reservationService.getUserTicket(id);\n    }\n\n    @Get(':id')\n    getOne(\n        @Param('id', new ParseUUIDPipe({errorHttpStatusCode: HttpStatus.FORBIDDEN, version: \"4\"})) id: string) {\n        return this.reservationService.getOneReservation(id);\n    }\n\n    @Patch(':id')\n    editOne(\n        @Param('id', new ParseUUIDPipe({errorHttpStatusCode: HttpStatus.FORBIDDEN, version: \"4\"})) id: string,\n        @Body() dto: EditReservationDto) {\n        return this.reservationService.updateReservation(id, dto);\n    }\n\n    @Delete(':id')\n    removeReservation(\n        @Param('id', new ParseUUIDPipe({errorHttpStatusCode: HttpStatus.FORBIDDEN, version: \"4\"})) id: string) {\n        return this.reservationService.removeReservation(id);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationsModule.html":{"url":"modules/ReservationsModule.html","title":"module - ReservationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_imports\n\n\n\ncluster_ReservationsModule_providers\n\n\n\n\nRoutesModule\n\nRoutesModule\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nRoutesModule->ReservationsModule\n\n\n\n\n\nStopsModule\n\nStopsModule\n\nReservationsModule -->\n\nStopsModule->ReservationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nReservationsModule -->\n\nUsersModule->ReservationsModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\nRoutesService\n\nRoutesService\n\nReservationsModule -->\n\nRoutesService->ReservationsModule\n\n\n\n\n\nStopsService\n\nStopsService\n\nReservationsModule -->\n\nStopsService->ReservationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/reservations/reservations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReservationsService\n                        \n                        \n                            RoutesService\n                        \n                        \n                            StopsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReservationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RoutesModule\n                        \n                        \n                            StopsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Moduł rezerwacji miejsca\n/*\n\nNUMER REZERWACJI (UNIKALNA)\nDO KOGO PRZYPISANA (USER)\nDO JAKIEJ TRASY (ROUTES)\nDATA ODJAZDU\nDATA PRZYJAZDU\n\n*/\n\nimport { forwardRef, Module } from '@nestjs/common';\nimport { ReservationsService } from './reservations.service';\nimport { ReservationsController } from './reservations.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Reservation } from './entities/reservation.entity';\nimport { UsersModule } from 'src/users/users.module';\nimport { RoutesModule } from 'src/routes/routes.module';\nimport { RoutesService } from 'src/routes/routes.service';\nimport { Route } from 'src/routes/entities/route.entity';\nimport { StopsService } from 'src/stops/stops.service';\nimport { StopsModule } from 'src/stops/stops.module';\nimport { Stop } from 'src/stops/entities/stop.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Reservation, Route, Stop]), UsersModule, RoutesModule, StopsModule],\n  providers: [ReservationsService, RoutesService, StopsService],\n  controllers: [ReservationsController]\n})\nexport class ReservationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationsService.html":{"url":"injectables/ReservationsService.html","title":"injectable - ReservationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservations/reservations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createReservation\n                            \n                            \n                                    Async\n                                createUserReservation\n                            \n                            \n                                    Async\n                                getAllReservations\n                            \n                            \n                                    Async\n                                getOneReservation\n                            \n                            \n                                    Async\n                                getUserTicket\n                            \n                            \n                                    Async\n                                removeReservation\n                            \n                            \n                                    Async\n                                updateReservation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationRepository: Repository, userService: UsersService, routeService: RoutesService)\n                    \n                \n                        \n                            \n                                Defined in src/reservations/reservations.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        routeService\n                                                  \n                                                        \n                                                                        RoutesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservation(dto: CreateReservationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUserReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUserReservation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllReservations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllReservations()\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOneReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneReservation(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserTicket(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeReservation(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateReservation(id: string, dto: EditReservationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservations/reservations.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            EditReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Reservation } from './entities/reservation.entity';\nimport { Repository } from 'typeorm';\nimport { from, Observable } from 'rxjs';\nimport { GetReservationsResponse, ReservationI } from './interfaces/reservation.model';\nimport { EditReservationDto } from './dto/edit-reservation.dto';\nimport { UserI } from 'src/users/interfaces/user.interface';\nimport { UsersService } from 'src/users/users.service';\nimport { User } from 'src/users/entities/user.entity';\nimport { RoutesService } from 'src/routes/routes.service';\nimport { Route as RouteI} from '../routes/interfaces/route.model';\nimport { GetTicketResponse } from './interfaces/ticket.model';\n\n@Injectable()\nexport class ReservationsService {\n\n    constructor(\n        @InjectRepository(Reservation) private reservationRepository: Repository,\n        @Inject(UsersService) private readonly userService: UsersService,\n        @Inject(forwardRef(() => RoutesService)) private readonly routeService: RoutesService\n    ) {}\n\n    async createReservation(dto: CreateReservationDto): Promise {\n\n        const newReservation = new Reservation();\n\n        //newReservation.from = dto.from;\n        //newReservation.to = dto.to;\n        newReservation.status = dto.status;\n\n        const reservation = await this.reservationRepository.save(newReservation);\n\n        const user = await this.userService.getOneUser(dto.userId);\n\n        newReservation.user = user;\n\n        await this.reservationRepository.save(newReservation);\n\n        const route = await this.routeService.getRoute(dto.routeId);\n\n        newReservation.route = route;\n\n        await this.reservationRepository.save(newReservation);\n\n        return {\n            message: \"Reservacja stworzona pomyślnie\",\n            reservation\n        }\n\n\n        /*const { userId, from, to, status} = dto;\n\n        await this.userService.getOneUser(userId);\n\n            const newReservation = await this.reservationRepository.create(dto);\n            const reservation = await this.reservationRepository.save(newReservation);\n            return {\n                message: \"Reservacja stworzona pomyślnie\",\n                reservation\n            }*/\n    }\n\n    async createUserReservation(): Promise {\n\n\n    }\n\n    async getAllReservations(): Promise {\n        const reservations = await this.reservationRepository.find({ relations: ['user', 'route', 'route.start', 'route.end']});\n\n        if(reservations.length  {\n        const userId = await this.userService.getOne(id);\n        console.log(userId);\n        const ticket = await this.reservationRepository.find({relations: ['user', 'route', 'route.start', 'route.end'], where: {user: userId}});\n\n        if(!ticket) {\n            return {\n                message: \"Nie udało sie pobrać rezerwacji\"\n            }\n        }\n\n        return {\n            message: \"\",\n            ticket\n        }\n    }\n\n    async getOneReservation(id: string) {\n        const reservation = await this.reservationRepository.findOne({\n            where: { id: id },\n            relations: ['user', 'route']\n        });\n\n        if (!reservation) throw new NotFoundException(`Nie znaleziono rezerwacji o podanym numerze id: ${id}.`)\n\n        return reservation;\n    }\n\n    async updateReservation(id: string, dto: EditReservationDto) {\n        const reservation = await this.reservationRepository.findOne({ where: { id: id } });\n\n        if(!reservation) throw new NotFoundException(`Rezerwacja o podanym numerze id ${id} nie istnieje.`)\n\n        const user = await this.userService.getOneUser(dto.userId);\n\n        const editedReservation = Object.assign(reservation, dto);\n        editedReservation.user = user;\n        return await this.reservationRepository.save(editedReservation);\n    }\n\n    async removeReservation(id: string): Promise {\n        const reservation = await this.reservationRepository.findOne({ where: { id: id }});\n\n        if (reservation){\n            await this.reservationRepository.remove(reservation);\n\n            return {\n                message: `Rezerwacja o numerze ${id} została usunięta pomyślnie.`\n            }\n        }\n\n        return {\n            message: `Rezerwacja o numerze ${id} nie istnieje.`\n        }\n    }\n\n\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Route.html":{"url":"entities/Route.html","title":"entity - Route","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Route\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/entities/route.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                arrival_date\n                            \n                            \n                                    \n                                    \n                                driver\n                            \n                            \n                                    \n                                    \n                                end\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                reservations\n                            \n                            \n                                    \n                                    \n                                start\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrival_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/entities/route.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        driver\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, driver => driver.route, {onDelete: 'SET NULL'})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/entities/route.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Stop\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, stop => stop.lastStop, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/entities/route.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/entities/route.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReservationI\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.route, {onDelete: 'CASCADE'})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/entities/route.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Stop\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, stop => stop.firstStop, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/routes/entities/route.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Reservation } from \"src/reservations/entities/reservation.entity\";\nimport { ReservationI } from \"src/reservations/interfaces/reservation.model\";\nimport { Stop } from \"src/stops/entities/stop.entity\";\nimport { User } from \"src/users/entities/user.entity\";\nimport { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToMany, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity('route')\nexport class Route {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @ManyToOne(() => Stop, (stop: Stop) => stop.firstStop, {\n        onDelete: 'CASCADE'\n    })\n    @JoinColumn()\n    start: Stop;\n\n    @ManyToOne(() => Stop, (stop: Stop) => stop.lastStop, {\n        onDelete: 'CASCADE'\n    })\n    @JoinColumn()\n    end: Stop;\n\n    @Column()\n    arrival_date: Date;\n\n    @ManyToOne(() => User, (driver: User) => driver.route, {\n        onDelete: 'SET NULL'\n    })\n    @JoinTable()\n    driver: User;\n\n    @OneToMany(() => Reservation, (reservation: Reservation) => reservation.route, {\n        onDelete: 'CASCADE'\n    })\n    @JoinTable()\n    reservations: ReservationI;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoutesController.html":{"url":"controllers/RoutesController.html","title":"controller - RoutesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoutesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/routes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                routes\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createRoute\n                            \n                            \n                                    \n                                getOneRoute\n                            \n                            \n                                    \n                                getRoutes\n                            \n                            \n                                    \n                                removeRoute\n                            \n                            \n                                    \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRoute(dto: CreateRouteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/routes/routes.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateRouteDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getOneRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneRoute(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/routes/routes.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getRoutes\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoutes()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/routes/routes.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRoute(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/routes/routes.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOne(id: number, dto: EditRouteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/routes/routes.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            EditRouteDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Inject, Param, Patch, Post } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Stop } from 'src/stops/interfaces/stop.model';\nimport { CreateRouteDto } from './dto/create-route.dto';\nimport { EditRouteDto } from './dto/edit-route.dto';\nimport { Route } from './entities/route.entity';\nimport { RoutesService } from './routes.service';\n\n@Controller('routes')\nexport class RoutesController {\n\n    constructor(\n        @Inject(RoutesService) private routesService: RoutesService\n    ) {}\n\n    @Get()\n    getRoutes(): Promise {\n        return this.routesService.getAllRoutes();\n    }\n\n    @Post()\n    createRoute(@Body() dto: CreateRouteDto): Promise {\n        return this.routesService.createRoute(dto);\n    }\n\n    @Get(':id')\n    getOneRoute(id: number) {\n        return this.routesService.getRoute(id);\n    }\n\n    @Patch(':id')\n    async updateOne(\n        @Param('id') id: number,\n        @Body() dto: EditRouteDto) {\n        await this.routesService.updateOne(id, dto);\n        const route = await this.routesService.getRoute(id);\n        return {\n            message: \"Użytkownik edytowany pomyślnie\",\n            route\n        }\n    }\n\n    @Delete(':id')\n    removeRoute(\n        @Param('id') id: number): Observable {\n            return this.routesService.deleteOne(id);\n    }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoutesModule.html":{"url":"modules/RoutesModule.html","title":"module - RoutesModule","body":"\n                   \n\n\n\n\n    Modules\n    RoutesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoutesModule\n\n\n\ncluster_RoutesModule_imports\n\n\n\ncluster_RoutesModule_providers\n\n\n\n\nStopsModule\n\nStopsModule\n\n\n\nRoutesModule\n\nRoutesModule\n\nRoutesModule -->\n\nStopsModule->RoutesModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nRoutesModule -->\n\nUsersModule->RoutesModule\n\n\n\n\n\nRoutesService\n\nRoutesService\n\nRoutesModule -->\n\nRoutesService->RoutesModule\n\n\n\n\n\nStopsService\n\nStopsService\n\nRoutesModule -->\n\nStopsService->RoutesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routes/routes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoutesService\n                        \n                        \n                            StopsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoutesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StopsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Stop } from 'src/stops/entities/stop.entity';\nimport { StopsModule } from 'src/stops/stops.module';\nimport { StopsService } from 'src/stops/stops.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { Connection } from 'typeorm';\nimport { Route } from './entities/route.entity';\nimport { RoutesController } from './routes.controller';\nimport { RoutesService } from './routes.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Route]), TypeOrmModule.forFeature([Stop]), StopsModule, UsersModule],\n  controllers: [RoutesController],\n  providers: [RoutesService, StopsService]\n})\nexport class RoutesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutesService.html":{"url":"injectables/RoutesService.html","title":"injectable - RoutesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/routes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRoute\n                            \n                            \n                                deleteOne\n                            \n                            \n                                    Async\n                                getAllRoutes\n                            \n                            \n                                    Async\n                                getRoute\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(routeRepository: Repository, stopsService: StopsService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/routes/routes.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        routeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stopsService\n                                                  \n                                                        \n                                                                        StopsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRoute(dto: CreateRouteDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/routes/routes.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateRouteDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteOne\n                        \n                    \n                \n            \n            \n                \ndeleteOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/routes/routes.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllRoutes\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllRoutes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/routes/routes.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/routes/routes.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOne(id: number, route: EditRouteDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/routes/routes.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                route\n                                            \n                                                            EditRouteDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateRouteDto } from './dto/create-route.dto';\nimport { Route } from './entities/route.entity';\nimport { Stop as StopI } from 'src/stops/interfaces/stop.model';\nimport { Stop } from 'src/stops/entities/stop.entity';\nimport { StopsService } from 'src/stops/stops.service';\nimport { User } from 'src/users/entities/user.entity';\nimport { UsersService } from 'src/users/users.service';\nimport { from, Observable } from 'rxjs';\nimport { EditRouteDto } from './dto/edit-route.dto';\n\n@Injectable()\nexport class RoutesService {\n\n    constructor(\n        @InjectRepository(Route) private routeRepository: Repository,\n        @Inject(StopsService) private stopsService: StopsService,\n        @Inject(UsersService) private usersService: UsersService\n    ) {}\n\n    async getAllRoutes() {\n        return await this.routeRepository.find(\n            {\n                relations: ['start','end', 'driver']\n            }\n        );\n    }\n\n    async getRoute(id: number) {\n        return await this.routeRepository.findOne({ where: { id: id} })\n    }\n\n    async createRoute(dto: CreateRouteDto): Promise {\n\n        const newRoute = new Route();\n        newRoute.arrival_date = dto.arrival_date;\n\n        const start: Stop = await this.stopsService.getStop(dto.startId);\n        const end: Stop = await this.stopsService.getStop(dto.endId);\n        const driver: User = await this.usersService.getDriver(dto.driverId);\n\n        newRoute.start = start;\n        newRoute.end = end;\n        newRoute.driver = driver;\n\n        await this.routeRepository.save(newRoute);\n\n        return {\n            message: \"Trasa stworzonna pomyślnie\",\n            newRoute\n            //newRoute\n        }\n\n    }\n\n    async updateOne(id: number, route: EditRouteDto) {\n\n        if(route.driverId != null) {\n            const driver = await this.usersService.getDriver(route.driverId);\n            route.driver = driver;\n        }\n\n        if(route.startId != null) {\n            const start = await this.stopsService.getStop(route.startId);\n            route.start = start;\n        }\n\n        if(route.endId != null) {\n            const end = await this.stopsService.getStop(route.endId);\n            route.end = end;\n        }\n\n            delete route.driverId;\n            delete route.endId;\n            delete route.startId;\n\n            const updateRoute = await this.routeRepository.update(id, route);\n\n            return {\n                updateRoute\n            }\n\n    }\n\n\n    deleteOne(id: number): Observable {\n        return from(this.routeRepository.delete(id));\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SearchController.html":{"url":"controllers/SearchController.html","title":"controller - SearchController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SearchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/search/search.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                search\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                filterRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        filterRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterRoute(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/search/search.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, Param, Query } from '@nestjs/common';\nimport { SearchService } from './search.service';\n\n@Controller('search')\nexport class SearchController {\n\n    constructor(\n        @Inject(SearchService) private searchService: SearchService,\n    ) {}\n\n    @Get()\n    async filterRoute(@Query() params) {\n        const from = params.from;\n        const to = params.to;\n        const arrival_date = params.arrival_date;\n\n        return await this.searchService.filterRoute(from, to, arrival_date);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_providers\n\n\n\ncluster_SearchModule_imports\n\n\n\n\nRoutesModule\n\nRoutesModule\n\n\n\nSearchModule\n\nSearchModule\n\nSearchModule -->\n\nRoutesModule->SearchModule\n\n\n\n\n\nStopsModule\n\nStopsModule\n\nSearchModule -->\n\nStopsModule->SearchModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nSearchModule -->\n\nUsersModule->SearchModule\n\n\n\n\n\nRoutesService\n\nRoutesService\n\nSearchModule -->\n\nRoutesService->SearchModule\n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\nStopsService\n\nStopsService\n\nSearchModule -->\n\nStopsService->SearchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoutesService\n                        \n                        \n                            SearchService\n                        \n                        \n                            StopsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SearchController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RoutesModule\n                        \n                        \n                            StopsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Route } from 'src/routes/entities/route.entity';\nimport { RoutesModule } from 'src/routes/routes.module';\nimport { RoutesService } from 'src/routes/routes.service';\nimport { Stop } from 'src/stops/entities/stop.entity';\nimport { StopsModule } from 'src/stops/stops.module';\nimport { StopsService } from 'src/stops/stops.service';\nimport { User } from 'src/users/entities/user.entity';\nimport { UsersModule } from 'src/users/users.module';\nimport { SearchController } from './search.controller';\nimport { SearchService } from './search.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Route]), TypeOrmModule.forFeature([Stop]), TypeOrmModule.forFeature([User]), RoutesModule, StopsModule, UsersModule],\n  controllers: [SearchController],\n  providers: [SearchService, RoutesService, StopsService]\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SearchService.html":{"url":"injectables/SearchService.html","title":"injectable - SearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/search/search.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                filterRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(routeRepository: Repository, stopRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/search/search.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        routeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stopRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        filterRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterRoute(from: string, to: string, arrival_date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/search/search.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                from\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                arrival_date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport e from 'express';\nimport { Route } from 'src/routes/entities/route.entity';\nimport { Stop } from 'src/stops/entities/stop.entity';\nimport { MoreThanOrEqual, Repository } from 'typeorm';\n\n@Injectable()\nexport class SearchService {\n\n    constructor(\n        //@Inject(RoutesService) private routesService: RoutesService,\n        @InjectRepository(Route) private routeRepository: Repository,\n        @InjectRepository(Stop) private stopRepository: Repository,\n    ) {}\n\n    async filterRoute(from: string, to: string, arrival_date: Date): Promise {\n\n        /*const tempdata = await getManager().query(`\n        SELECT DISTINCT route.id, route.arrival_date, stop.name INTO TEMP temp_table1\n        FROM route INNER JOIN route_stops_stop ON route.id = route_stops_stop.\"routeId\", stop\n        WHERE stop.id = route_stops_stop.\"stopId\"\n        AND route.arrival_date > TIMESTAMP '${arrival_date}'\n        GROUP BY route.id, stop.name\n        HAVING stop.name = '${from}' OR stop.name = '${to}'\n        `)\n\n        const tempdata1 = await getManager().query(`\n            SELECT DISTINCT id\n            FROM temp_table1\n            GROUP BY id\n        `)\n\n        const data = await this.routeRepository.findByIds(tempdata1, { relations: ['stops'] });\n\n        console.log(tempdata1);\n        return {\n            data\n        }\n        */\n\n    const message: string = \"\";\n    const fromData = await this.stopRepository.findOne({\n        where: { name: from }\n    });\n    const toData = await this.stopRepository.findOne({\n        where: { name: to }\n    });\n    //const data = await this.routeRepository.findOne({arrival_date: MoreThanOrEqual(arrival_date), start: fromData, end: toData }, {relations: ['start', 'end']});\n\n    if (!fromData || !toData) {\n        const data = await this.routeRepository.find({relations: ['start', 'end'], where: {arrival_date: arrival_date}});\n        if(data.length  TIMESTAMP '2021-05-25'\n\tAND stop.name = 'Rzeszów'\n\n    SELECT route.arrival_date as \"Data Podróży\", stop.name as \"Przystanek\"\n\tFROM route JOIN route_stops_stop ON route.id = route_stops_stop.\"routeId\", stop\n\tWHERE route.arrival_date > TIMESTAMP '2021-05-25'\n\tAND stop.name = 'Jasło'\n\n    SELECT route.arrival_date as \"Data Podróży\", stop.name as \"Przystanek\"\n\tFROM route JOIN route_stops_stop ON route.id = route_stops_stop.\"routeId\", stop\n\tWHERE route.arrival_date > TIMESTAMP '2021-05-25'\n\tAND stop.name = 'Jasło'\n\n            SELECT DISTINCT route.*, stop\n        FROM route INNER JOIN route_stops_stop ON route.id = route_stops_stop.\"routeId\", stop\n        WHERE stop.id = route_stops_stop.\"stopId\"\n        AND route.arrival_date > TIMESTAMP '2021-05-25'\n        AND stop.name = '${from}'\n        OR stop.name = '${to}'\n\n    SELECT DISTINCT trasy.id as \"Numer Kursu\", trasy.arrival_date as \"Data Kursu\", przystanki.id as \"Numer Przystanku\", przystanki.name as \"Nazwa Przystanku\"\nFROM route as trasy LEFT JOIN route_stops_stop ON trasy.id = route_stops_stop.\"routeId\", stop as przystanki\nWHERE trasy.arrival_date >= TIMESTAMP '2021-05-25'\n\n\n\nSELECT DISTINCT route.id, route.arrival_date, stop.name INTO TEMP temp_table1\nFROM route INNER JOIN route_stops_stop ON route.id = route_stops_stop.\"routeId\", stop\nWHERE stop.id = route_stops_stop.\"stopId\"\nAND route.arrival_date > TIMESTAMP '2021-05-25'\nGROUP BY route.id, stop.name\nHAVING stop.name = 'Przemyśl' OR stop.name = 'Kraków'\n\n\n        SELECT DISTINCT route.id, route.arrival_date, stop.name\n        FROM route INNER JOIN route_stops_stop ON route.id = route_stops_stop.\"routeId\", stop\n        WHERE stop.id = route_stops_stop.\"stopId\"\n        AND route.arrival_date > TIMESTAMP '${arrival_date}'\n        GROUP BY route.id, stop.name\n        HAVING stop.name = '${from}' OR stop.name = '${to}'\n*/\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Stop.html":{"url":"entities/Stop.html","title":"entity - Stop","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Stop\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stops/entities/stop.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                firstStop\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastStop\n                            \n                            \n                                    \n                                lat\n                            \n                            \n                                    \n                                lng\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstStop\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Route[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, route => route.start, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stops/entities/stop.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stops/entities/stop.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastStop\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Route[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, route => route.end, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stops/entities/stop.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stops/entities/stop.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stops/entities/stop.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stops/entities/stop.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Route } from \"src/routes/entities/route.entity\";\nimport { Column, Entity, ManyToMany, ManyToOne, OneToMany, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity('stop')\nexport class Stop {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        unique: true\n    })\n    name: string;\n\n    @Column({\n        nullable: true\n    })\n    lat: number;\n\n    @Column({\n        nullable: true\n    })\n    lng: number;\n\n    @OneToMany(() => Route, (route: Route) => route.start, {\n        onDelete: 'CASCADE'\n    })\n    firstStop: Route[];\n\n    @OneToMany(() => Route, (route: Route) => route.end, {\n        onDelete: 'CASCADE'\n    })\n    lastStop: Route[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StopResponse.html":{"url":"interfaces/StopResponse.html","title":"interface - StopResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StopResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stops/interfaces/stop-response.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            stop\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stop:         Stop\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Stop\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Stop } from \"./stop.model\";\n\nexport interface StopResponse {\n\n    message: string;\n    stop: Stop;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StopsController.html":{"url":"controllers/StopsController.html","title":"controller - StopsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StopsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stops/stops.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stops\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createStop\n                            \n                            \n                                    \n                                getStop\n                            \n                            \n                                    \n                                getStops\n                            \n                            \n                                    \n                                removeStop\n                            \n                            \n                                    \n                                updateStop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createStop\n                        \n                    \n                \n            \n            \n                \n                        \n                    createStop(dto: CreateStopDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/stops/stops.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateStopDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStop\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStop(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/stops/stops.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStops\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStops()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/stops/stops.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeStop\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeStop(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/stops/stops.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateStop\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStop(id: number, stop: EditStopDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/stops/stops.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                stop\n                                            \n                                                            EditStopDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Inject, Param, Patch, Post } from '@nestjs/common';\nimport { CreateStopDto } from './dto/create-stop.dto';\nimport { EditStopDto } from './dto/edit-stop.dto';\nimport { StopsService } from './stops.service';\n\n@Controller('stops')\nexport class StopsController {\n\n    constructor(\n        @Inject(StopsService) private stopsService: StopsService\n    ) {}\n\n    @Get(':id')\n    getStop(id: number) {\n        return this.stopsService.getStop(id);\n    }\n\n    @Get()\n    getStops() {\n        return this.stopsService.getStops();\n    }\n\n    @Post()\n    createStop(@Body() dto: CreateStopDto): Promise {\n        return this.stopsService.createStop(dto);\n    }\n\n    @Patch(':id')\n    updateStop(\n        @Param('id') id: number,\n        @Body() stop: EditStopDto): Promise {\n        return this.stopsService.editStop(id, stop);\n    }\n\n    @Delete(':id')\n    removeStop(@Param('id') id: number): Promise {\n        return this.stopsService.deleteStop(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StopsModule.html":{"url":"modules/StopsModule.html","title":"module - StopsModule","body":"\n                   \n\n\n\n\n    Modules\n    StopsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StopsModule\n\n\n\ncluster_StopsModule_providers\n\n\n\n\nStopsService\n\nStopsService\n\n\n\nStopsModule\n\nStopsModule\n\nStopsModule -->\n\nStopsService->StopsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stops/stops.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StopsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StopsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StopsService } from './stops.service';\nimport { StopsController } from './stops.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Stop } from './entities/stop.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Stop])],\n  providers: [StopsService],\n  controllers: [StopsController]\n})\nexport class StopsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StopsService.html":{"url":"injectables/StopsService.html","title":"injectable - StopsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StopsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stops/stops.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createStop\n                            \n                            \n                                    Async\n                                deleteStop\n                            \n                            \n                                    Async\n                                editStop\n                            \n                            \n                                    Async\n                                getStop\n                            \n                            \n                                    Async\n                                getStops\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stopRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stops/stops.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stopRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createStop\n                        \n                    \n                \n            \n            \n                \n                        \n                    createStop(dto: CreateStopDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/stops/stops.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateStopDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteStop\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteStop(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/stops/stops.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editStop\n                        \n                    \n                \n            \n            \n                \n                        \n                    editStop(id: number, stop: EditStopDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/stops/stops.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                stop\n                                            \n                                                            EditStopDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStop\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStop(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/stops/stops.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStops\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStops()\n                \n            \n\n\n                    \n                        \n                            Defined in src/stops/stops.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateStopDto } from './dto/create-stop.dto';\nimport { EditStopDto } from './dto/edit-stop.dto';\nimport { Stop } from './entities/stop.entity';\nimport { StopResponse } from './interfaces/stop-response.model';\n\n@Injectable()\nexport class StopsService {\n\n    constructor(\n        @InjectRepository(Stop) private readonly stopRepository: Repository\n    ) {}\n\n    async getStops() {\n        const data = await this.stopRepository.find();\n        let message: string;\n        if (data != null) {\n            message = \"Pobrano pomyślnie\";\n        } else {\n            message = \"Nie udało się pobrać danych\"\n        }\n        return {\n            data,\n            message\n        }\n    }\n\n    async getStop(id: number): Promise {\n        return await this.stopRepository.findOne({ where: {\n            id: id\n        }});\n    }\n\n    async createStop(dto: CreateStopDto): Promise {\n        const stopExist = await this.stopRepository.findOne({\n            where: { name: dto.name }\n        });\n\n        if (stopExist) {\n            throw new HttpException(\"Przystanek o takiej nazwie już istnieje\", HttpStatus.CONFLICT);\n        }\n\n        const newStop = new Stop();\n\n        newStop.name = dto.name;\n        newStop.lat = dto.lat;\n        newStop.lng = dto.lng;\n\n        await this.stopRepository.save(newStop);\n\n        return {\n            message: \"Przystanek stworzony pomyślnie\",\n            newStop\n        }\n    }\n\n    async editStop(id: number, stop: EditStopDto) {\n\n        const stopExist = await this.stopRepository.findOne(\n            {\n                where: {\n                    name: stop.name\n                }\n            });\n\n        if(stopExist) {\n            throw new HttpException(\"Przystanek o takiej nazwie już istnieje\", HttpStatus.CONFLICT);\n        } else {\n            const newStop = await this.stopRepository.update(id, stop);\n            return {\n                message: 'Zaktualizowano pomyślnie',\n                newStop\n            }\n        }\n    }\n\n    async deleteStop(id: number): Promise {\n        await this.stopRepository.delete(id);\n        return {\n            message: \"Usunięto pomyślnie\"\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isEmployee\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                reservations\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                route\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'birth_date', type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name', type: 'varchar', length: 20, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isEmployee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name', type: 'varchar', length: 30, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReservationI[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(type => Reservation, reservation => reservation.user, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Route[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, route => route.driver, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:68\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { hash } from \"bcryptjs\";\nimport { Reservation } from \"src/reservations/entities/reservation.entity\";\nimport { ReservationI } from \"src/reservations/interfaces/reservation.model\";\nimport { Route } from \"src/routes/entities/route.entity\";\nimport { BeforeInsert, BeforeUpdate, Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToMany, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { UserRole } from \"../enums/user-role.enum\";\n\n@Entity({ name: \"user\" })\nexport class User {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        unique: true,\n    })\n    email: string;\n\n    @Column({\n        select: false,\n    })\n    password: string;\n\n    @Column({\n        name: \"first_name\",\n        type: 'varchar',\n        length: 20,\n        nullable: true,\n    })\n    firstName: string;\n\n    @Column({\n        name: \"last_name\",\n        type: 'varchar',\n        length: 30,\n        nullable: true\n    })\n    lastName: string;\n\n    @Column({\n        name: \"birth_date\",\n        type: 'date'\n    })\n    birthDate: Date;\n\n    @Column({\n        default: false\n    })\n    isEmployee: boolean;\n\n    @Column({\n        type: \"enum\",\n        enum: UserRole,\n        default: UserRole.USER\n    })\n    role: UserRole;\n\n    @CreateDateColumn({\n        name: \"created_at\",\n        type: \"timestamp\"\n    })\n    createdAt: Date;\n\n    @UpdateDateColumn({\n        name: \"updated_at\",\n        type: \"timestamp\"\n    })\n    updatedAt: Date;\n\n    @ManyToOne(type => Reservation, reservation => reservation.user, { onDelete: \"CASCADE\"})\n    reservations: ReservationI[];\n\n    @ManyToOne(() => Route, route => route.driver, { onDelete: \"CASCADE\"})\n    route: Route[];\n\n    @BeforeInsert()\n    @BeforeUpdate()\n    async hashPassword() {\n        if (!this.password) {\n            return;\n        }\n        this.password = await hash(this.password, 10);\n    }\n\n    @BeforeInsert()\n    async emailToLowerCase() {\n        this.email = this.email.toLowerCase();\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserFindOne.html":{"url":"interfaces/UserFindOne.html","title":"interface - UserFindOne","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserFindOne\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { hash } from 'bcryptjs';\nimport { from, Observable } from 'rxjs';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { EditUserDto } from './dto/edit-user.dto';\nimport { User } from './entities/user.entity';\nimport { UserI } from './interfaces/user.interface';\n\nexport interface UserFindOne {\n    id?: number;\n    email?: string;\n}\n\n@Injectable()\nexport class UsersService {\n\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository\n    ) {}\n\n    async createOne(dto: CreateUserDto): Promise {\n        const userExist = await this.userRepository.findOne({\n            where: {\n                email: dto.email\n            }\n        });\n\n        if (userExist) {\n            throw new HttpException(\"Użytkownik o podanym adresie email istnieje.\", HttpStatus.CONFLICT);\n            //throw new BadRequestException('Użytkownik o podanym adresie email istnieje.');\n        }\n\n        const newUser = this.userRepository.create(dto);\n        const user =  await this.userRepository.save(newUser);\n\n        delete user.password;\n        return user\n    }\n\n    // Funkcja zwracająca tablice wszystkich użytkowników\n    async getAllUsers(): Promise {\n\n        const data = await this.userRepository.find();\n        return data;\n    }\n\n    async findDriver() {\n        return await this.userRepository.find({\n            where: {\n                isEmployee: true,\n            }\n        });\n    }\n\n    async getDriver(id: number) {\n        const data = await this.userRepository.findOne({\n            where: {\n                id: id,\n                isEmployee: true\n            }\n        });\n        if (!data) {\n            throw new HttpException('Nie znaleziono kierowcy o podanym numerze ID.', HttpStatus.NOT_FOUND);\n        }\n\n        return data;\n    }\n\n    async getOneUser(id: number): Promise {\n        const user = await this.userRepository.findOne({\n            where: {\n                id: id\n            }\n        });\n\n        if (!user) {\n            throw new HttpException(\"Użytkownik o podanym id nie istnieje\", HttpStatus.NOT_FOUND);\n        }\n\n        return user;\n    }\n\n    async updateOne(id: number, user: EditUserDto) {\n\n        if(user.password == null) {\n            delete user.password;\n            const updateUser = await this.userRepository.update(id, user);\n            return {\n                updateUser\n            }\n        } else {\n            user.password = await hash(user.password, 10);\n            const updateUser = await this.userRepository.update(id, user);\n            const data = await this.userRepository.findOne({ where: { id: id }});\n            return {\n                updateUser, data\n            }\n        }\n        /*\n        user.password = await hash(user.password, 10);\n        const updateUser = await this.userRepository.update(id, user);\n        const data = await this.userRepository.findOne(id);\n        */\n\n    }\n\n    deleteOne(id: number): Observable {\n        return from(this.userRepository.delete(id));\n    }\n\n    async getOne(id: number, userEntity?: User) {\n        const user = await this.userRepository\n          .findOne({ where: { id: id }})\n          .then(u => (!userEntity ? u : !!u && userEntity.id === u.id ? u : null));\n\n        if (!user)\n          throw new NotFoundException('Użytkownik nie istnieje');\n\n        return user;\n      }\n\n    async findOne(data: UserFindOne) {\n        return await this.userRepository\n          .createQueryBuilder('user')\n          .where(data)\n          .addSelect('user.password')\n          .getOne();\n    }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserI.html":{"url":"interfaces/UserI.html","title":"interface - UserI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            birthDate\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isEmployee\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        birthDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        birthDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isEmployee\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isEmployee:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserRole\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserRole } from \"../enums/user-role.enum\";\n\n\nexport interface UserI {\n\n    id: number,\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    birthDate: Date;\n    isEmployee: boolean;\n    role: UserRole;\n    createdAt: Date;\n    updatedAt: Date;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                User controller utility class.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addUser\n                            \n                            \n                                    \n                                getDriver\n                            \n                            \n                                    \n                                getUser\n                            \n                            \n                                    \n                                    \n                                getUsers\n                            \n                            \n                                    \n                                    \n                                removeUser\n                            \n                            \n                                    \n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUser(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA DTO containing user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An object containing the message and user data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDriver\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDriver()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/driver')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOne(id: number, editUser: EditUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                editUser\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { message: string; user: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, ForbiddenException, Get, HttpStatus, Inject, Param, ParseIntPipe, Patch, Post, Put, UseGuards } from '@nestjs/common';\nimport { hash } from 'bcryptjs';\nimport { ValidationError } from 'class-validator';\nimport { Observable } from 'rxjs';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth-guard';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { EditUserDto } from './dto/edit-user.dto';\nimport { UserI } from './interfaces/user.interface';\nimport { UsersService } from './users.service';\n\n\n/**\n * User controller utility class.\n */\n@Controller('users')\nexport class UsersController {\n\n    constructor(\n        @Inject(UsersService) private usersService: UsersService\n    ) {}\n\n    /**\n        * Creates a new user.\n        * @param dto - A DTO containing user data.\n        * @returns An object containing the message and user data.\n    */\n    @Post()\n    async addUser(@Body() dto: CreateUserDto): Promise {\n\n        const user = await this.usersService.createOne(dto);\n        return {\n            message: \"Użytkownik stworzony pomyślnie\",\n            user\n        }\n    }\n\n    @Get()\n    @UseGuards(JwtAuthGuard)\n    getUsers(): Promise {\n        return this.usersService.getAllUsers();\n    }\n\n    @Get('/driver')\n    getDriver() {\n        const driver = this.usersService.findDriver();\n        return driver\n    }\n\n    @Get(':id')\n    //@UseGuards(JwtAuthGuard)\n    getUser(\n        @Param('id', new ParseIntPipe({\n            errorHttpStatusCode: HttpStatus.FORBIDDEN,\n        })) id: number): Promise {\n        return this.usersService.getOneUser(id);\n    }\n\n    @Patch(':id')\n    updateOne(\n        @Param('id') id: number,\n        @Body() editUser: EditUserDto) {\n        const data = this.usersService.updateOne(id, editUser);\n        const user = this.usersService.getOneUser(id);\n        return {\n            message: \"Użytkownik edytowany pomyślnie\",\n            user\n        }\n    }\n\n    @Delete(':id')\n    @UseGuards(JwtAuthGuard)\n    removeUser(\n        @Param('id') id: number): Observable {\n            return this.usersService.deleteOne(id);\n    }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Moduł ze wszystkimi użytkownikami serwisu\n\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOne\n                            \n                            \n                                deleteOne\n                            \n                            \n                                    Async\n                                findDriver\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getDriver\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Async\n                                getOneUser\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOne(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteOne\n                        \n                    \n                \n            \n            \n                \ndeleteOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findDriver\n                        \n                    \n                \n            \n            \n                \n                        \n                    findDriver()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(data: UserFindOne)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            UserFindOne\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDriver\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDriver(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOne(id: number, userEntity?: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userEntity\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOneUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOne(id: number, user: EditUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { hash } from 'bcryptjs';\nimport { from, Observable } from 'rxjs';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { EditUserDto } from './dto/edit-user.dto';\nimport { User } from './entities/user.entity';\nimport { UserI } from './interfaces/user.interface';\n\nexport interface UserFindOne {\n    id?: number;\n    email?: string;\n}\n\n@Injectable()\nexport class UsersService {\n\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository\n    ) {}\n\n    async createOne(dto: CreateUserDto): Promise {\n        const userExist = await this.userRepository.findOne({\n            where: {\n                email: dto.email\n            }\n        });\n\n        if (userExist) {\n            throw new HttpException(\"Użytkownik o podanym adresie email istnieje.\", HttpStatus.CONFLICT);\n            //throw new BadRequestException('Użytkownik o podanym adresie email istnieje.');\n        }\n\n        const newUser = this.userRepository.create(dto);\n        const user =  await this.userRepository.save(newUser);\n\n        delete user.password;\n        return user\n    }\n\n    // Funkcja zwracająca tablice wszystkich użytkowników\n    async getAllUsers(): Promise {\n\n        const data = await this.userRepository.find();\n        return data;\n    }\n\n    async findDriver() {\n        return await this.userRepository.find({\n            where: {\n                isEmployee: true,\n            }\n        });\n    }\n\n    async getDriver(id: number) {\n        const data = await this.userRepository.findOne({\n            where: {\n                id: id,\n                isEmployee: true\n            }\n        });\n        if (!data) {\n            throw new HttpException('Nie znaleziono kierowcy o podanym numerze ID.', HttpStatus.NOT_FOUND);\n        }\n\n        return data;\n    }\n\n    async getOneUser(id: number): Promise {\n        const user = await this.userRepository.findOne({\n            where: {\n                id: id\n            }\n        });\n\n        if (!user) {\n            throw new HttpException(\"Użytkownik o podanym id nie istnieje\", HttpStatus.NOT_FOUND);\n        }\n\n        return user;\n    }\n\n    async updateOne(id: number, user: EditUserDto) {\n\n        if(user.password == null) {\n            delete user.password;\n            const updateUser = await this.userRepository.update(id, user);\n            return {\n                updateUser\n            }\n        } else {\n            user.password = await hash(user.password, 10);\n            const updateUser = await this.userRepository.update(id, user);\n            const data = await this.userRepository.findOne({ where: { id: id }});\n            return {\n                updateUser, data\n            }\n        }\n        /*\n        user.password = await hash(user.password, 10);\n        const updateUser = await this.userRepository.update(id, user);\n        const data = await this.userRepository.findOne(id);\n        */\n\n    }\n\n    deleteOne(id: number): Observable {\n        return from(this.userRepository.delete(id));\n    }\n\n    async getOne(id: number, userEntity?: User) {\n        const user = await this.userRepository\n          .findOne({ where: { id: id }})\n          .then(u => (!userEntity ? u : !!u && userEntity.id === u.id ? u : null));\n\n        if (!user)\n          throw new NotFoundException('Użytkownik nie istnieje');\n\n        return user;\n      }\n\n    async findOne(data: UserFindOne) {\n        return await this.userRepository\n          .createQueryBuilder('user')\n          .where(data)\n          .addSelect('user.password')\n          .getOne();\n    }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-login.dto.ts\n            \n            class\n            AuthLoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-register.dto.ts\n            \n            class\n            AuthRegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth-guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth-guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interface/JwtPayload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/constants.ts\n            \n            variable\n            DATABASE_HOST\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/constants.ts\n            \n            variable\n            DATABASE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/constants.ts\n            \n            variable\n            DATABASE_PASSWORD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/constants.ts\n            \n            variable\n            DATABASE_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/constants.ts\n            \n            variable\n            DATABASE_USERNAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/constants.ts\n            \n            variable\n            JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reservations/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/reservations/dto/edit-reservation.dto.ts\n            \n            class\n            EditReservationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/reservations/entities/reservation.entity.ts\n            \n            entity\n            Reservation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reservations/interfaces/reservation.model.ts\n            \n            interface\n            ReservationI\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/reservations/reservations.controller.ts\n            \n            controller\n            ReservationsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/reservations/reservations.service.ts\n            \n            injectable\n            ReservationsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/routes/dto/create-route.dto.ts\n            \n            class\n            CreateRouteDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/routes/dto/edit-route.dto.ts\n            \n            class\n            EditRouteDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/routes/entities/route.entity.ts\n            \n            entity\n            Route\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/interfaces/route.model.ts\n            \n            interface\n            Route\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/routes/routes.controller.ts\n            \n            controller\n            RoutesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/routes/routes.service.ts\n            \n            injectable\n            RoutesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/search/search.controller.ts\n            \n            controller\n            SearchController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/search/search.service.ts\n            \n            injectable\n            SearchService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stops/dto/create-stop.dto.ts\n            \n            class\n            CreateStopDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stops/dto/edit-stop.dto.ts\n            \n            class\n            EditStopDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/stops/entities/stop.entity.ts\n            \n            entity\n            Stop\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stops/interfaces/stop-response.model.ts\n            \n            interface\n            StopResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stops/interfaces/stop.model.ts\n            \n            interface\n            Stop\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stops/stops.controller.ts\n            \n            controller\n            StopsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stops/stops.service.ts\n            \n            injectable\n            StopsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/edit-user.dto.ts\n            \n            class\n            EditUserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/login.interface.ts\n            \n            interface\n            LoginInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            UserI\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                28 %\n                (2/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            UserFindOne\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.8\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.8\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.3.8\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.2\n        \n            rimraf : ^5.0.7\n        \n            rxjs : ^7.8.1\n        \n            swagger : ^0.7.5\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^9.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ReservationStatus   (src/.../reservation-status.enum.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/reservations/enums/reservation-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ReservationStatus\n                    \n                \n                        \n                            \n                                 NEW\n                            \n                        \n                        \n                            \n                                Value : NEW\n                            \n                        \n                        \n                            \n                                 ACCEPTED\n                            \n                        \n                        \n                            \n                                Value : ACCEPTED\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN PROGRESS\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : REJECTED\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : CONFIRMED\n                            \n                        \n                        \n                            \n                                 USED\n                            \n                        \n                        \n                            \n                                Value : USED\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : CANCELED\n                            \n                        \n            \n        \n\n    src/users/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 EMPLOYEE\n                            \n                        \n                        \n                            \n                                Value : employee\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoutesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StopsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_providers\n\n\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nAppModule -->\n\nReservationsModule->AppModule\n\n\n\n\n\nRoutesModule\n\nRoutesModule\n\nReservationsModule -->\n\nRoutesModule->ReservationsModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nSearchModule -->\n\nRoutesModule->SearchModule\n\n\n\nAppModule -->\n\nRoutesModule->AppModule\n\n\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nStopsModule\n\nStopsModule\n\nReservationsModule -->\n\nStopsModule->ReservationsModule\n\n\n\nRoutesModule -->\n\nStopsModule->RoutesModule\n\n\n\nSearchModule -->\n\nStopsModule->SearchModule\n\n\n\nAppModule -->\n\nStopsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nReservationsModule -->\n\nUsersModule->ReservationsModule\n\n\n\nRoutesModule -->\n\nUsersModule->RoutesModule\n\n\n\nSearchModule -->\n\nUsersModule->SearchModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\nRoutesService\n\nRoutesService\n\nReservationsModule -->\n\nRoutesService->ReservationsModule\n\n\n\nRoutesModule -->\n\nRoutesService->RoutesModule\n\n\n\nSearchModule -->\n\nRoutesService->SearchModule\n\n\n\n\n\nStopsService\n\nStopsService\n\nReservationsModule -->\n\nStopsService->ReservationsModule\n\n\n\nRoutesModule -->\n\nStopsService->RoutesModule\n\n\n\nSearchModule -->\n\nStopsService->SearchModule\n\n\n\nStopsModule -->\n\nStopsService->StopsModule\n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Łukasz Bielecki\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetReservationsResponse   (src/.../reservation.model.ts)\n                        \n                        \n                            GetTicketResponse   (src/.../ticket.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/reservations/interfaces/reservation.model.ts\n    \n    \n        \n            \n                \n                    \n                    GetReservationsResponse\n                \n            \n            \n                \n                        literal type | literal type\n\n                \n            \n        \n    \n    src/reservations/interfaces/ticket.model.ts\n    \n    \n        \n            \n                \n                    \n                    GetTicketResponse\n                \n            \n            \n                \n                        literal type | literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DATABASE_HOST   (src/.../constants.ts)\n                        \n                        \n                            DATABASE_NAME   (src/.../constants.ts)\n                        \n                        \n                            DATABASE_PASSWORD   (src/.../constants.ts)\n                        \n                        \n                            DATABASE_PORT   (src/.../constants.ts)\n                        \n                        \n                            DATABASE_USERNAME   (src/.../constants.ts)\n                        \n                        \n                            JWT_SECRET   (src/.../constants.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DATABASE_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATABASE_HOST'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATABASE_NAME'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATABASE_PASSWORD'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATABASE_PORT'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_USERNAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATABASE_USERNAME'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'JWT_SECRET'\n                    \n                \n\n\n        \n    \n\n    src/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: string, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        const user = request.user;\n\n        return data ? user && user[data]: user;\n    },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
